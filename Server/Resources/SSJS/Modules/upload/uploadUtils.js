/*  * To change this template, choose Tools | Templates * and open the template in the editor. */  /** * File Class */function FileItem(config){    this.name = config.name || null;    this.size = config.size || null;    this.type = config.type || null;}FileItem.prototype.setName = function (name){    this.name = name;}FileItem.prototype.getName = function (){    return this.name;}FileItem.prototype.setSize = function (size){    this.size = size;}FileItem.prototype.getSize = function (){    return this.size;}FileItem.prototype.setType = function (type){    this.type = type;}FileItem.prototype.getType = function (){    return this.type;}/** * Result Class : represent a result of a validation test * Used in the Uploader Class */function Result(){    this.message        = null;    this.error          = [];    this.conflicts      = [];    this.conflictMessage= null;}Result.prototype.setMessage = function(msg){    this.message = msg;}Result.prototype.setConflictMessage = function(msg){    this.conflictMessage = msg;}Result.prototype.addConflict = function(conflict){    if(conflict instanceof Conflict){        this.conflicts.push(conflict);    }}Result.prototype.addNewConflict = function(config){    this.addConflict(new Conflict(config));}Result.prototype.addError = function(error){    if(error instanceof Error){        this.error.push(error);    }}Result.prototype.addNewError = function(config){    this.addError(new Error(config));}Result.prototype.getErrors = function(config){    return this.error;}Result.prototype.getConflicts = function(config){    return this.conflicts;}/** * Error Class */function Error(config){    this.errCode            = config.errCode            || null;    this.message            = config.message            || null;    this.componentSignature = config.componentSignature || null;}/** * Conflict Class */function Conflict(config){    this.fileSent   = config.fileSent   || null;    this.fileExists = config.fileExists || null;}/** * The Uploader Class */function Uploader(config){    this.files      = config && config.files    ? config.files      : [];    this.maxSize    = config && config.maxSize  ? config.maxSize    : null;    this.maxFiles   = config && config.maxFiles ? config.maxFiles   : null;    this.result     = config && config.result   ? config.result     : new Result();}Uploader.prototype.getResult = function(){    return this.result;}Uploader.prototype.setResult = function(result){    this.result = result;}Uploader.prototype.getFiles = function(){    return this.files;}Uploader.prototype.getMaxFiles = function(){    return this.maxFiles;}Uploader.prototype.setMaxFiles = function(maxFiles){    if(maxFiles < 0){        this.maxFiles = 'unlimited';    }        else{        this.maxFiles = maxFiles;    }}Uploader.prototype.getMaxSize = function(){    return this.maxSize;}Uploader.prototype.setMaxSize = function(maxSize){    if(maxSize < 0){        this.maxSize = 'unlimited';    }        else{        this.maxSize = maxSize;    }}Uploader.prototype.get = function(index){    return this.files[index];}Uploader.prototype.validate = function(index , validator){    var    res = this.result;        if(validator instanceof Function){        validator.call(this.get(index) , res)    }        return res;}Uploader.prototype.validateAll = function(validator){    var    res = this.result;        if(validator instanceof Function){        this.each(function(){            validator.call(this , res);        });    }        return res;}Uploader.prototype.each = function(fn){    for(var _i = 0 , file ; file = this.get(_i) ; _i++){        fn.call(file , _i);    }}Uploader.prototype.addFile = function(f){    this.files.push(new FileItem(f));}Uploader.prototype.addFiles = function(files){    for(var _i = 0 , f ; f = files[_i] ; _i++ ){        this.addFile(f);    }}Uploader.prototype.addNewFile = function(config){    this.files.push(new FileItem(config));}exports.File 		= FileItem;exports.Result 		= Result;exports.Uploader 	= Uploader;