/** This file is part of Wakanda software, licensed by 4D under*  (i) the GNU General Public License version 3 (GNU GPL v3), or*  (ii) the Affero General Public License version 3 (AGPL v3) or*  (iii) a commercial license.* This file remains the exclusive property of 4D and/or its licensors* and is protected by national and international legislations.* In any event, Licensee's compliance with the terms and conditions* of the applicable license constitutes a prerequisite to any use of this file.* Except as otherwise expressly stated in the applicable license,* such license does not include any other license or rights on this file,* 4D's and/or its licensors' trademarks and/or other proprietary rights.* Consequently, no title, copyright or other proprietary rights* other than those specified in the applicable license is granted.*/// Test of BOM handling (File, XHR, etc.)var testCase = {    name: 'BOM Test',    _should: {        ignore: {        }    },    setUp : function () {    	this.HtmlFileWithBOMPath = application.getFolder('path') + 'WebFolder/testBOM.html';    	this.HtmlFileWithoutBOMPath = application.getFolder('path') + 'WebFolder/testNoBOM.html';    	this.XmlFileWithBOMPath = application.getFolder('path') + 'WebFolder/testBOM.xml';    	this.XmlFileWithoutBOMPath = application.getFolder('path') + 'WebFolder/testNoBOM.xml';    	this.HtmlFileWithBOMUrl = 'http://127.0.0.1:8081/testBOM.html';    	this.HtmlFileWithoutBOMUrl = 'http://127.0.0.1:8081/testNoBOM.html';    	this.XmlFileWithBOMUrl = 'http://127.0.0.1:8081/testBOM.xml';    	this.XmlFileWithoutBOMUrl = 'http://127.0.0.1:8081/testNoBOM.xml';    },    testHtmlContentIsIdenticalUsingFileToString: function() {        var fileWithBOM = File(this.HtmlFileWithBOMPath);        var contentWithBOMFileToString = fileWithBOM.toString();        var fileWithoutBOM = File(this.HtmlFileWithoutBOMPath);        var contentWithoutBOMFileToString = fileWithoutBOM.toString();        Y.Assert.areSame(contentWithoutBOMFileToString, contentWithBOMFileToString);    },    testHtmlLengthIsIdenticalUsingFileToString: function() {        var fileWithBOM = File(this.HtmlFileWithBOMPath);        var contentWithBOMFileToString = fileWithBOM.toString();        var fileWithoutBOM = File(this.HtmlFileWithoutBOMPath);        var contentWithoutBOMFileToString = fileWithoutBOM.toString();        Y.Assert.areSame(contentWithoutBOMFileToString.length, contentWithBOMFileToString.length);    },    testHtmlContentIsIdenticalUsingTextStreamRead: function() {        var fileWithBOM = File(this.HtmlFileWithBOMPath);		var streamWithBOM = TextStream(fileWithBOM, 'read');		var contentWithBOMTextStreamRead = streamWithBOM.read();		streamWithBOM.close();        var fileWithoutBOM = File(this.HtmlFileWithoutBOMPath);		var streamWithoutBOM = TextStream(fileWithoutBOM, 'read');		var contentWithoutBOMTextStreamRead = streamWithoutBOM.read();		streamWithoutBOM.close();        Y.Assert.areSame(contentWithoutBOMTextStreamRead, contentWithBOMTextStreamRead);    },    testHtmlLengthIsIdenticalUsingTextStreamRead: function() {        var fileWithBOM = File(this.HtmlFileWithBOMPath);		var streamWithBOM = TextStream(fileWithBOM, 'read');		var contentWithBOMTextStreamRead = streamWithBOM.read();		streamWithBOM.close();        var fileWithoutBOM = File(this.HtmlFileWithoutBOMPath);		var streamWithoutBOM = TextStream(fileWithoutBOM, 'read');		var contentWithoutBOMTextStreamRead = streamWithoutBOM.read();		streamWithoutBOM.close();        Y.Assert.areSame(contentWithoutBOMTextStreamRead.length, contentWithBOMTextStreamRead.length);    },    testHtmlContentIsIdenticalUsingXHRResponseText: function() {        var XHRWithBOM = new XMLHttpRequest();		XHRWithBOM.open('GET', this.HtmlFileWithBOMUrl);		XHRWithBOM.send();		var contentWithBOMXHRResponseText = XHRWithBOM.responseText;		var XHRWithoutBOM = new XMLHttpRequest();		XHRWithoutBOM.open('GET', this.HtmlFileWithoutBOMUrl);		XHRWithoutBOM.send();		var contentWithoutBOMXHRResponseText = XHRWithoutBOM.responseText;        Y.Assert.areSame(contentWithoutBOMXHRResponseText, contentWithBOMXHRResponseText);    },    testHtmlLengthIsIdenticalUsingXHRResponseText: function() {        var XHRWithBOM = new XMLHttpRequest();		XHRWithBOM.open('GET', this.HtmlFileWithBOMUrl);		XHRWithBOM.send();		var contentWithBOMXHRResponseText = XHRWithBOM.responseText;		var XHRWithoutBOM = new XMLHttpRequest();		XHRWithoutBOM.open('GET', this.HtmlFileWithoutBOMUrl);		XHRWithoutBOM.send();		var contentWithoutBOMXHRResponseText = XHRWithoutBOM.responseText;        Y.Assert.areSame(contentWithoutBOMXHRResponseText.length, contentWithBOMXHRResponseText.length);    },    testHtmlContentAlwaysHasTheSameLength: function() {        var fileWithBOM = File(this.HtmlFileWithBOMPath);        var contentWithBOMFileToString = fileWithBOM.toString();        var fileWithoutBOM = File(this.HtmlFileWithoutBOMPath);        var contentWithoutBOMFileToString = fileWithoutBOM.toString();		var streamWithBOM = TextStream(fileWithBOM, 'read');		var contentWithBOMTextStreamRead = streamWithBOM.read();		streamWithBOM.close();		var streamWithoutBOM = TextStream(fileWithoutBOM, 'read');		var contentWithoutBOMTextStreamRead = streamWithoutBOM.read();		streamWithoutBOM.close();        var XHRWithBOM = new XMLHttpRequest();		XHRWithBOM.open('GET', this.HtmlFileWithBOMUrl);		XHRWithBOM.send();		var contentWithBOMXHRResponseText = XHRWithBOM.responseText;		var XHRWithoutBOM = new XMLHttpRequest();		XHRWithoutBOM.open('GET', this.HtmlFileWithoutBOMUrl);		XHRWithoutBOM.send();		var contentWithoutBOMXHRResponseText = XHRWithoutBOM.responseText;		Y.Assert.areSame(contentWithoutBOMFileToString.length, contentWithoutBOMTextStreamRead.length, 'File.toString(NO BOM) != TextStream.read(NO BOM)');		Y.Assert.areSame(contentWithoutBOMFileToString.length, contentWithoutBOMXHRResponseText.length, 'File.toString(NO BOM) != XHR.responseText(NO BOM)');        Y.Assert.areSame(contentWithoutBOMFileToString.length, contentWithBOMTextStreamRead.length, 'File.toString(NO BOM) != TextStream.read(BOM)');        Y.Assert.areSame(contentWithoutBOMFileToString.length, contentWithBOMXHRResponseText.length, 'File.toString(NO BOM) != XHR.responseText(BOM)');		Y.Assert.areSame(contentWithoutBOMTextStreamRead.length, contentWithoutBOMXHRResponseText.length, 'TextStream.read(NO BOM) != XHR.responseText(NO BOM)');        Y.Assert.areSame(contentWithoutBOMTextStreamRead.length, contentWithBOMFileToString.length, 'TextStream.read(NO BOM) != File.toString(BOM)');        Y.Assert.areSame(contentWithoutBOMTextStreamRead.length, contentWithBOMXHRResponseText.length, 'TextStream.read(NO BOM) != XHR.responseText(BOM)');        Y.Assert.areSame(contentWithoutBOMXHRResponseText.length, contentWithBOMFileToString.length, 'XHR.responseText(NO BOM) != File.toString(BOM)');		Y.Assert.areSame(contentWithoutBOMXHRResponseText.length, contentWithBOMTextStreamRead.length, 'XHR.responseText(NO BOM) != TextStream.read(BOM)');		Y.Assert.areSame(contentWithBOMXHRResponseText.length, contentWithBOMFileToString.length, 'XHR.responseText(BOM) != File.toString(BOM)');		Y.Assert.areSame(contentWithBOMXHRResponseText.length, contentWithBOMTextStreamRead.length, 'XHR.responseText(BOM) != TextStream.read(BOM)');		Y.Assert.areSame(contentWithBOMTextStreamRead.length, contentWithBOMFileToString.length, 'TextStream.read(BOM) != File.toString(BOM)');    },    testHtmlContentAlwaysHasTheSameContent: function() {        var fileWithBOM = File(this.HtmlFileWithBOMPath);        var contentWithBOMFileToString = fileWithBOM.toString();        var fileWithoutBOM = File(this.HtmlFileWithoutBOMPath);        var contentWithoutBOMFileToString = fileWithoutBOM.toString();		var streamWithBOM = TextStream(fileWithBOM, 'read');		var contentWithBOMTextStreamRead = streamWithBOM.read();		streamWithBOM.close();		var streamWithoutBOM = TextStream(fileWithoutBOM, 'read');		var contentWithoutBOMTextStreamRead = streamWithoutBOM.read();		streamWithoutBOM.close();        var XHRWithBOM = new XMLHttpRequest();		XHRWithBOM.open('GET', this.HtmlFileWithBOMUrl);		XHRWithBOM.send();		var contentWithBOMXHRResponseText = XHRWithBOM.responseText;		var XHRWithoutBOM = new XMLHttpRequest();		XHRWithoutBOM.open('GET', this.HtmlFileWithoutBOMUrl);		XHRWithoutBOM.send();		var contentWithoutBOMXHRResponseText = XHRWithoutBOM.responseText;		Y.Assert.areSame(contentWithoutBOMFileToString, contentWithoutBOMTextStreamRead, 'File.toString(NO BOM) != TextStream.read(NO BOM)');		Y.Assert.areSame(contentWithoutBOMFileToString, contentWithoutBOMXHRResponseText, 'File.toString(NO BOM) != XHR.responseText(NO BOM)');        Y.Assert.areSame(contentWithoutBOMFileToString, contentWithBOMTextStreamRead, 'File.toString(NO BOM) != TextStream.read(BOM)');        Y.Assert.areSame(contentWithoutBOMFileToString, contentWithBOMXHRResponseText, 'File.toString(NO BOM) != XHR.responseText(BOM)');		Y.Assert.areSame(contentWithoutBOMTextStreamRead, contentWithoutBOMXHRResponseText, 'TextStream.read(NO BOM) != XHR.responseText(NO BOM)');        Y.Assert.areSame(contentWithoutBOMTextStreamRead, contentWithBOMFileToString, 'TextStream.read(NO BOM) != File.toString(BOM)');        Y.Assert.areSame(contentWithoutBOMTextStreamRead, contentWithBOMXHRResponseText, 'TextStream.read(NO BOM) != XHR.responseText(BOM)');        Y.Assert.areSame(contentWithoutBOMXHRResponseText, contentWithBOMFileToString, 'XHR.responseText(NO BOM) != File.toString(BOM)');		Y.Assert.areSame(contentWithoutBOMXHRResponseText, contentWithBOMTextStreamRead, 'XHR.responseText(NO BOM) != TextStream.read(BOM)');		Y.Assert.areSame(contentWithBOMXHRResponseText, contentWithBOMFileToString, 'XHR.responseText(BOM) != File.toString(BOM)');		Y.Assert.areSame(contentWithBOMXHRResponseText, contentWithBOMTextStreamRead, 'XHR.responseText(BOM) != TextStream.read(BOM)');		Y.Assert.areSame(contentWithBOMTextStreamRead, contentWithBOMFileToString, 'TextStream.read(BOM) != File.toString(BOM)');    },    testXmlContentIsIdenticalUsingFileToString: function() {        var fileWithBOM = File(this.XmlFileWithBOMPath);        var contentWithBOMFileToString = fileWithBOM.toString();        var fileWithoutBOM = File(this.XmlFileWithoutBOMPath);        var contentWithoutBOMFileToString = fileWithoutBOM.toString();        Y.Assert.areSame(contentWithoutBOMFileToString, contentWithBOMFileToString);    },    testXmlLengthIsIdenticalUsingFileToString: function() {        var fileWithBOM = File(this.XmlFileWithBOMPath);        var contentWithBOMFileToString = fileWithBOM.toString();        var fileWithoutBOM = File(this.XmlFileWithoutBOMPath);        var contentWithoutBOMFileToString = fileWithoutBOM.toString();        Y.Assert.areSame(contentWithoutBOMFileToString.length, contentWithBOMFileToString.length);    },    testXmlContentIsIdenticalUsingTextStreamRead: function() {        var fileWithBOM = File(this.XmlFileWithBOMPath);		var streamWithBOM = TextStream(fileWithBOM, 'read');		var contentWithBOMTextStreamRead = streamWithBOM.read();		streamWithBOM.close();        var fileWithoutBOM = File(this.XmlFileWithoutBOMPath);		var streamWithoutBOM = TextStream(fileWithoutBOM, 'read');		var contentWithoutBOMTextStreamRead = streamWithoutBOM.read();		streamWithoutBOM.close();        Y.Assert.areSame(contentWithoutBOMTextStreamRead, contentWithBOMTextStreamRead);    },    testXmlLengthIsIdenticalUsingTextStreamRead: function() {        var fileWithBOM = File(this.XmlFileWithBOMPath);		var streamWithBOM = TextStream(fileWithBOM, 'read');		var contentWithBOMTextStreamRead = streamWithBOM.read();		streamWithBOM.close();        var fileWithoutBOM = File(this.XmlFileWithoutBOMPath);		var streamWithoutBOM = TextStream(fileWithoutBOM, 'read');		var contentWithoutBOMTextStreamRead = streamWithoutBOM.read();		streamWithoutBOM.close();        Y.Assert.areSame(contentWithoutBOMTextStreamRead.length, contentWithBOMTextStreamRead.length);    },    testXmlContentIsIdenticalUsingXHRResponseText: function() {        var XHRWithBOM = new XMLHttpRequest();		XHRWithBOM.open('GET', this.XmlFileWithBOMUrl);		XHRWithBOM.send();		var contentWithBOMXHRResponseText = XHRWithBOM.responseText;		var XHRWithoutBOM = new XMLHttpRequest();		XHRWithoutBOM.open('GET', this.XmlFileWithoutBOMUrl);		XHRWithoutBOM.send();		var contentWithoutBOMXHRResponseText = XHRWithoutBOM.responseText;        Y.Assert.areSame(contentWithoutBOMXHRResponseText, contentWithBOMXHRResponseText);    },    testXmlLengthIsIdenticalUsingXHRResponseText: function() {        var XHRWithBOM = new XMLHttpRequest();		XHRWithBOM.open('GET', this.XmlFileWithBOMUrl);		XHRWithBOM.send();		var contentWithBOMXHRResponseText = XHRWithBOM.responseText;		var XHRWithoutBOM = new XMLHttpRequest();		XHRWithoutBOM.open('GET', this.XmlFileWithoutBOMUrl);		XHRWithoutBOM.send();		var contentWithoutBOMXHRResponseText = XHRWithoutBOM.responseText;        Y.Assert.areSame(contentWithoutBOMXHRResponseText.length, contentWithBOMXHRResponseText.length);    },    testXmlContentAlwaysHasTheSameLength: function() {        var fileWithBOM = File(this.XmlFileWithBOMPath);        var contentWithBOMFileToString = fileWithBOM.toString();        var fileWithoutBOM = File(this.XmlFileWithoutBOMPath);        var contentWithoutBOMFileToString = fileWithoutBOM.toString();		var streamWithBOM = TextStream(fileWithBOM, 'read');		var contentWithBOMTextStreamRead = streamWithBOM.read();		streamWithBOM.close();		var streamWithoutBOM = TextStream(fileWithoutBOM, 'read');		var contentWithoutBOMTextStreamRead = streamWithoutBOM.read();		streamWithoutBOM.close();        var XHRWithBOM = new XMLHttpRequest();		XHRWithBOM.open('GET', this.XmlFileWithBOMUrl);		XHRWithBOM.send();		var contentWithBOMXHRResponseText = XHRWithBOM.responseText;		var XHRWithoutBOM = new XMLHttpRequest();		XHRWithoutBOM.open('GET', this.XmlFileWithoutBOMUrl);		XHRWithoutBOM.send();		var contentWithoutBOMXHRResponseText = XHRWithoutBOM.responseText;		Y.Assert.areSame(contentWithoutBOMFileToString.length, contentWithoutBOMTextStreamRead.length, 'File.toString(NO BOM) != TextStream.read(NO BOM)');		Y.Assert.areSame(contentWithoutBOMFileToString.length, contentWithoutBOMXHRResponseText.length, 'File.toString(NO BOM) != XHR.responseText(NO BOM)');        Y.Assert.areSame(contentWithoutBOMFileToString.length, contentWithBOMTextStreamRead.length, 'File.toString(NO BOM) != TextStream.read(BOM)');        Y.Assert.areSame(contentWithoutBOMFileToString.length, contentWithBOMXHRResponseText.length, 'File.toString(NO BOM) != XHR.responseText(BOM)');		Y.Assert.areSame(contentWithoutBOMTextStreamRead.length, contentWithoutBOMXHRResponseText.length, 'TextStream.read(NO BOM) != XHR.responseText(NO BOM)');        Y.Assert.areSame(contentWithoutBOMTextStreamRead.length, contentWithBOMFileToString.length, 'TextStream.read(NO BOM) != File.toString(BOM)');        Y.Assert.areSame(contentWithoutBOMTextStreamRead.length, contentWithBOMXHRResponseText.length, 'TextStream.read(NO BOM) != XHR.responseText(BOM)');        Y.Assert.areSame(contentWithoutBOMXHRResponseText.length, contentWithBOMFileToString.length, 'XHR.responseText(NO BOM) != File.toString(BOM)');		Y.Assert.areSame(contentWithoutBOMXHRResponseText.length, contentWithBOMTextStreamRead.length, 'XHR.responseText(NO BOM) != TextStream.read(BOM)');		Y.Assert.areSame(contentWithBOMXHRResponseText.length, contentWithBOMFileToString.length, 'XHR.responseText(BOM) != File.toString(BOM)');		Y.Assert.areSame(contentWithBOMXHRResponseText.length, contentWithBOMTextStreamRead.length, 'XHR.responseText(BOM) != TextStream.read(BOM)');		Y.Assert.areSame(contentWithBOMTextStreamRead.length, contentWithBOMFileToString.length, 'TextStream.read(BOM) != File.toString(BOM)');    },    testHtmlContentAlwaysHasTheSameContent: function() {        var fileWithBOM = File(this.XmlFileWithBOMPath);        var contentWithBOMFileToString = fileWithBOM.toString();        var fileWithoutBOM = File(this.XmlFileWithoutBOMPath);        var contentWithoutBOMFileToString = fileWithoutBOM.toString();		var streamWithBOM = TextStream(fileWithBOM, 'read');		var contentWithBOMTextStreamRead = streamWithBOM.read();		streamWithBOM.close();		var streamWithoutBOM = TextStream(fileWithoutBOM, 'read');		var contentWithoutBOMTextStreamRead = streamWithoutBOM.read();		streamWithoutBOM.close();        var XHRWithBOM = new XMLHttpRequest();		XHRWithBOM.open('GET', this.XmlFileWithBOMUrl);		XHRWithBOM.send();		var contentWithBOMXHRResponseText = XHRWithBOM.responseText;		var XHRWithoutBOM = new XMLHttpRequest();		XHRWithoutBOM.open('GET', this.XmlFileWithoutBOMUrl);		XHRWithoutBOM.send();		var contentWithoutBOMXHRResponseText = XHRWithoutBOM.responseText;		Y.Assert.areSame(contentWithoutBOMFileToString, contentWithoutBOMTextStreamRead, 'File.toString(NO BOM) != TextStream.read(NO BOM)');		Y.Assert.areSame(contentWithoutBOMFileToString, contentWithoutBOMXHRResponseText, 'File.toString(NO BOM) != XHR.responseText(NO BOM)');        Y.Assert.areSame(contentWithoutBOMFileToString, contentWithBOMTextStreamRead, 'File.toString(NO BOM) != TextStream.read(BOM)');        Y.Assert.areSame(contentWithoutBOMFileToString, contentWithBOMXHRResponseText, 'File.toString(NO BOM) != XHR.responseText(BOM)');		Y.Assert.areSame(contentWithoutBOMTextStreamRead, contentWithoutBOMXHRResponseText, 'TextStream.read(NO BOM) != XHR.responseText(NO BOM)');        Y.Assert.areSame(contentWithoutBOMTextStreamRead, contentWithBOMFileToString, 'TextStream.read(NO BOM) != File.toString(BOM)');        Y.Assert.areSame(contentWithoutBOMTextStreamRead, contentWithBOMXHRResponseText, 'TextStream.read(NO BOM) != XHR.responseText(BOM)');        Y.Assert.areSame(contentWithoutBOMXHRResponseText, contentWithBOMFileToString, 'XHR.responseText(NO BOM) != File.toString(BOM)');		Y.Assert.areSame(contentWithoutBOMXHRResponseText, contentWithBOMTextStreamRead, 'XHR.responseText(NO BOM) != TextStream.read(BOM)');		Y.Assert.areSame(contentWithBOMXHRResponseText, contentWithBOMFileToString, 'XHR.responseText(BOM) != File.toString(BOM)');		Y.Assert.areSame(contentWithBOMXHRResponseText, contentWithBOMTextStreamRead, 'XHR.responseText(BOM) != TextStream.read(BOM)');		Y.Assert.areSame(contentWithBOMTextStreamRead, contentWithBOMFileToString, 'TextStream.read(BOM) != File.toString(BOM)');    }};