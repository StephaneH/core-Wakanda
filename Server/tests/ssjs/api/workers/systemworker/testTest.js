﻿var testCase = {	name: 'Tests of the System Worker API',		testConstructorExists: function () {		Y.Assert.areSame('function', typeof SystemWorker);	},		testStaticExecMethodExists: function () {		Y.Assert.areSame('function', typeof SystemWorker.exec);	},		testConstructorReturnsInstance: function () {		Y.Assert.areSame('object', typeof new SystemWorker(''));	},			testInstanceEndOfInputMethodExists: function () {		var instance = new SystemWorker('');		Y.Assert.areSame('function', typeof instance.endOfInput);	},		testInstanceGetInfosMethodExists: function () {		var instance = new SystemWorker('');		Y.Assert.areSame('function', typeof instance.getInfos);	},		testInstanceGetNumberRunningMethodExists: function () {		var instance = new SystemWorker('');		Y.Assert.areSame('function', typeof instance.getNumberRunning);	},		testInstancePostMessageMethodExists: function () {		var instance = new SystemWorker('');		Y.Assert.areSame('function', typeof instance.postMessage);	},		testInstanceSetBinaryMethodExists: function () {		var instance = new SystemWorker('');		Y.Assert.areSame('function', typeof instance.setBinary);	},		testInstanceTerminateMethodExists: function () {		var instance = new SystemWorker('');		Y.Assert.areSame('function', typeof instance.terminate);	},		testInstanceWaitMethodExists: function () {		var instance = new SystemWorker('');		Y.Assert.areSame('function', typeof instance.wait);	},		testStaticExecMethodWrongTypeEmpty: function () {		var failed = false;		try {			SystemWorker.exec();		}		catch (e) {			Y.Assert.areSame('Wrong type for parameter #1, expected String.', e.message);			failed = true;		}		if (!failed) Y.Assert.fail('A "wrong type" error should have been thrown.');	},		testStaticExecMethodWrongTypeNumber: function () {		var failed = false;		try {			SystemWorker.exec(42);		}		catch (e) {			Y.Assert.areSame('Wrong type for parameter #1, expected String.', e.message);			failed = true;		}		if (!failed) Y.Assert.fail('A "wrong type" error should have been thrown.');	},		testStaticExecMethodWrongTypeNull: function () {		var failed = false;		try {			SystemWorker.exec(null);		}		catch (e) {			Y.Assert.areSame('Wrong type for parameter #1, expected String.', e.message);			failed = true;		}		if (!failed) Y.Assert.fail('A "wrong type" error should have been thrown.');	},		testStaticExecMethodWrongTypeDate: function () {		var failed = false;		try {			SystemWorker.exec(new Date());		}		catch (e) {			Y.Assert.areSame('Wrong type for parameter #1, expected String.', e.message);			failed = true;		}		if (!failed) Y.Assert.fail('A "wrong type" error should have been thrown.');	},		testStaticExecMethodWrongTypeObject: function () {		var failed = false;		try {			SystemWorker.exec({foo: 'bar'});		}		catch (e) {			Y.Assert.areSame('Wrong type for parameter #1, expected String.', e.message);			failed = true;		}		if (!failed) Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testStaticExecMethodWrongTypeFunction: function () {		var failed = false;		try {			SystemWorker.exec(function foo (bar) {});		}		catch (e) {			Y.Assert.areSame('Wrong type for parameter #1, expected String.', e.message);			failed = true;		}		if (!failed) Y.Assert.fail('A "wrong type" error should have been thrown.');	},		testStaticExecMethodUnknownCommand: function () {		var result = -1;		try {			result = SystemWorker.exec('supercalifragilisticexpialidocious');		}		catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		Y.Assert.isNull(result, 'result should be null');		/*		Y.Assert.isObject(result, 'result should be an objet');		Y.Assert.areNotSame(0, result.exitStatus, 'exitStatus should not be 0');		Y.Assert.isObject(result.error, 'error should be an objet');		Y.Assert.areNotSame(0, result.error.length, 'length of error should not be 0');		*/	},		testStaticExecMethodKnownCommandWrongPath: function () {		var result = -1;		if (os.isWindows) var command = 'ipconfig.exe';		else var command = 'ifconfig';		try {			result = SystemWorker.exec(command, null, '/supercalifragilisticexpialidocious');		}		catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		Y.Assert.isNull(result, 'result should be null');		/*		Y.Assert.isObject(result, 'result should be an objet');		Y.Assert.areNotSame(0, result.exitStatus, 'exitStatus should not be 0');		Y.Assert.isObject(result.error, 'error should be an objet');		Y.Assert.areNotSame(0, result.error.length, 'length of error should not be 0');		*/	},	testStaticExecMethodSimpleCommand: function () {		if (os.isWindows) var command = 'ipconfig.exe';		else if (os.isLinux) var command = '/sbin/ifconfig';		else var command = 'ifconfig';		if (os.isWindows) var re = /IPv4/;		else var re = /inet6/;		var result = SystemWorker.exec(command);		Y.Assert.isNotNull(result, 'The result from exec() should not be null');		Y.Assert.isInstanceOf(Buffer, result.output);		var output = result.output.toString('ascii'); // should not have to to it: on Win64 toString() or toString('utf-8') returns an empty result...		Y.Assert.areNotSame('', output, 'Output should not be empty: maybe a Buffer.toString() bug on some platforms. Need to study this further...');		var match = output.match(re);		Y.Assert.isNotNull(match, output);		Y.Assert.areSame(1, match.length, output);	},	testStaticExecMethodUnknownCommand_APIv2: function () {		var		result = -1;		try		{			result = SystemWorker. exec ( [ 'sergiy_sergiy_sergiy' ], {} );		}		catch ( e )		{			result = "exception";		}		Y.Assert.areSame("exception", result, 'There should be an exception for unknown worker');	},		testStaticExecMethodUnknownCommand_Async_APIv2: function() {		var result = "";		var sWorker = null;		try {			sWorker = new SystemWorker.exec(['sergiy_sergiy_sergiy'], {});		} catch (e) {			result = "exception";		}		Y.Assert.areSame("exception", result, 'There should be an exception for unknown worker');	},	testStaticExecMethodEcho_APIv2: function() {		var result = -1;		try {			if (os.isWindows)				result = SystemWorker.exec('cmd /C echo Anybody there?', {});			else				result = SystemWorker.exec("sh -c 'echo Anybody there?'", {});		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		Y.Assert.isNotNull(result, 'result should not be null');		Y.Assert.isInstanceOf(Buffer, result.output);		var strEcho = result.output.toString();		var strExpected = "";		if (os.isWindows)			strExpected = "Anybody there? " + String.fromCharCode(13) + String.fromCharCode(10);		else			strExpected = "Anybody there?" + String.fromCharCode(10);		Y.Assert.areSame(strExpected, strEcho, 'Result should be "' + strExpected + '"');	},	testStaticExecMethodEcho_Async_APIv2: function() {		var strEcho = "";		var sWorker = null;		try {			if (os.isWindows)				sWorker = new SystemWorker('cmd /C echo Anybody there?', {});			else				sWorker = new SystemWorker("sh -c 'echo Anybody there?'", {});		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		sWorker.onmessage = function(e) {			strEcho += arguments[0].data.toString();		};		sWorker.onerror = function(e) {			strEcho += arguments[0].data.toString();		};		sWorker.onterminated = function() {			exitWait();		}		wait(3000);		var strExpected = "";		if (os.isWindows)			strExpected = "Anybody there? " + String.fromCharCode(13) + String.fromCharCode(10);		else			strExpected = "Anybody there?" + String.fromCharCode(10);		Y.Assert.areSame(strExpected, strEcho, 'Result should be "' + strExpected + '"');	},	testStaticExecMethodEchoArr_APIv2: function() {		var result = -1;		try {			if (os.isWindows)				result = SystemWorker.exec(['cmd', '/C', 'echo', 'Anybody', 'there?'], {});			else				result = SystemWorker.exec(["sh", "-c", "echo Anybody there?"], {});		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		Y.Assert.isNotNull(result, 'result should not be null');		Y.Assert.isInstanceOf(Buffer, result.output);		var strEcho = result.output.toString();		var strExpected = "";		if (os.isWindows)			strExpected = "Anybody there?" + String.fromCharCode(13) + String.fromCharCode(10);		else			strExpected = "Anybody there?" + String.fromCharCode(10);		Y.Assert.areSame(strExpected, strEcho, 'Result should be "' + strExpected + '"');	},	testStaticExecMethodEchoArr_Async_APIv2: function() {		var strEcho = "";		var sWorker = null;		try {			if (os.isWindows)				sWorker = new SystemWorker(['cmd', '/C', 'echo', 'Anybody', 'there?'], {});			else				sWorker = new SystemWorker(["sh", "-c", "echo Anybody there?"], {});		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		sWorker.onmessage = function(e) {			strEcho += arguments[0].data.toString();		};		sWorker.onerror = function(e) {			strEcho += arguments[0].data.toString();		};		sWorker.onterminated = function() {			exitWait();		}		wait(3000);		var strExpected = "";		if (os.isWindows)			strExpected = "Anybody there?" + String.fromCharCode(13) + String.fromCharCode(10);		else			strExpected = "Anybody there?" + String.fromCharCode(10);		Y.Assert.areSame(strExpected, strEcho, 'Result should be "' + strExpected + '"');	},	testStaticExecMethod1Param_APIv2: function() {		var result = -1;		try {			result = SystemWorker.exec("git {vrsn}", {				parameters: {					vrsn: "--version"				}			});		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		Y.Assert.isNotNull(result, 'result should not be null');		Y.Assert.isInstanceOf(Buffer, result.output);		var strResult = result.output.toString().substring(0, 12);		var strExpected = "git version ";		Y.Assert.areSame(strExpected, strResult, 'Result should be "git version ..."');	},	testStaticExecMethod1Param_Async_APIv2: function() {		var strResult = "";		var sWorker = null;		try {			sWorker = new SystemWorker("git {vrsn}", {				parameters: {					vrsn: "--version"				}			});		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		sWorker.onmessage = function(e) {			strResult += arguments[0].data.toString();		};		sWorker.onerror = function(e) {			strResult += arguments[0].data.toString();		};		sWorker.onterminated = function() {			exitWait();		}		wait(3000);		var strResult = strResult.substring(0, 12);		var strExpected = "git version ";		Y.Assert.areSame(strExpected, strResult, 'Result should be "git version ..."');	},	testStaticExecMethod1ParamArr_APIv2: function() {		var result = -1;		var params = {			parameters: {				vrsn: "--version"			},			quote: ""		};		try {			result = SystemWorker.exec(["git", "{vrsn}"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		Y.Assert.isNotNull(result, 'result should not be null');		Y.Assert.isInstanceOf(Buffer, result.output);		var strResult = result.output.toString().substring(0, 12);		var strExpected = "git version ";		Y.Assert.areSame(strExpected, strResult, 'Result should be "git version ..."');	},	testStaticExecMethod1ParamArr_Async_APIv2: function() {		var strResult = "";		var sWorker = null;		var params = {			parameters: {				vrsn: "--version"			},			quote: ""		};		try {			sWorker = new SystemWorker(["git", "{vrsn}"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		sWorker.onmessage = function(e) {			strResult += arguments[0].data.toString();		};		sWorker.onerror = function(e) {			strResult += arguments[0].data.toString();		};		sWorker.onterminated = function() {			exitWait();		}		wait(3000);		var strResult = strResult.substring(0, 12);		var strExpected = "git version ";		Y.Assert.areSame(strExpected, strResult, 'Result should be "git version ..."');	},	testFolderParam_APIv2: function() {		var result = null;		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "cd"], {});			else				result = SystemWorker.exec(["sh", "-c", "pwd"], {});		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		var strNoFolderPath = result.output.toString();		var fldr = new Folder("/PROJECT");		var params = {			folder: fldr		};		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "cd"], params);			else				result = SystemWorker.exec(["sh", "-c", "pwd"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		var strWithFolderPath = result.output.toString();		Y.Assert.areNotSame(strNoFolderPath, strWithFolderPath, 'Paths should not be the same. path1 = ' + strNoFolderPath + " and path2 = strWithFolderPath");	},	testFolderParam_Async_APIv2: function() {		var strNoFolderPath = "";		var sWorker = null;		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "cd"], {});			else				sWorker = new SystemWorker(["sh", "-c", "pwd"], {});		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		sWorker.onmessage = function(e) {			strNoFolderPath += arguments[0].data.toString();		};		sWorker.onerror = function(e) {			strNoFolderPath += arguments[0].data.toString();		};		sWorker.onterminated = function() {			exitWait();		}		wait(3000);		var strWithFolderPath = "";		var fldr = new Folder("/PROJECT");		var params = {			folder: fldr		};		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "cd"], params);			else				sWorker = new SystemWorker(["sh", "-c", "pwd"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		sWorker.onmessage = function(e) {			strWithFolderPath += arguments[0].data.toString();		};		sWorker.onerror = function(e) {			strWithFolderPath += arguments[0].data.toString();		};		sWorker.onterminated = function() {			exitWait();		}		wait(3000);		Y.Assert.areNotSame(strNoFolderPath, strWithFolderPath, 'Paths should not be the same. path1 = ' + strNoFolderPath + " and path2 = strWithFolderPath");	},	testFolderParamNull_APIv2: function() {		var result = null;		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "cd"], {					folder: null				});			else				result = SystemWorker.exec(["sh", "-c", "pwd"], {					folder: null				});		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		Y.Assert.isNotNull(result, 'result should not be null');		Y.Assert.isInstanceOf(Buffer, result.output);		var strPath = result.output.toString();		Y.Assert.areNotSame(0, strPath.length, 'Path length should be greater then 0.');	},	testFolderParamNull_Async_APIv2: function() {		var sWorker = null;		var strPath = "";		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "cd"], {					folder: null				});			else				sWorker = new SystemWorker(["sh", "-c", "pwd"], {					folder: null				});		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		sWorker.onmessage = function(e) {			strPath += arguments[0].data.toString();		};		sWorker.onerror = function(e) {			strPath += arguments[0].data.toString();		};		sWorker.onterminated = function() {			exitWait();		}		wait(3000);		Y.Assert.areNotSame(0, strPath.length, 'Path length should be greater then 0.');	},	testFolderParamEmptyStr_APIv2: function() {		var result = null;		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "cd"], {					folder: ""				});			else				result = SystemWorker.exec(["sh", "-c", "pwd"], {					folder: ""				});		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		Y.Assert.isNotNull(result, 'result should not be null');		Y.Assert.isInstanceOf(Buffer, result.output);		var strPath = result.output.toString();		Y.Assert.areNotSame(0, strPath.length, 'Path length should be greater then 0.');	},	testFolderParamEmptyStr_Async_APIv2: function() {		var sWorker = null;		var strPath = "";		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "cd"], {					folder: ""				});			else				sWorker = new SystemWorker(["sh", "-c", "pwd"], {					folder: ""				});		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		sWorker.onmessage = function(e) {			strPath += arguments[0].data.toString();		};		sWorker.onerror = function(e) {			strPath += arguments[0].data.toString();		};		sWorker.onterminated = function() {			exitWait();		}		wait(3000);		Y.Assert.areNotSame(0, strPath.length, 'Path length should be greater then 0.');	},	testFolderParamArray_APIv2: function() {		var hadException = false;		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "cd"], {					folder: ["e1", "e2"]				});			else				result = SystemWorker.exec(["sh", "-c", "pwd"], {					folder: ["e1", "e2"]				});		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #folder, expected Folder or String.', e.message);			hadException = true;		}		if (!hadException) Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testFolderParamArray_Async_APIv2: function() {		var hadException = false;		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "cd"], {					folder: ["e1", "e2"]				});			else				sWorker = new SystemWorker(["sh", "-c", "pwd"], {					folder: ["e1", "e2"]				});		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #folder, expected Folder or String.', e.message);			hadException = true;		}		if (!hadException) Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testFolderParamFunction_APIv2: function() {		var hadException = false;		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "cd"], {					folder: function f1() {						var i = 234;						i++;					}				});			else				result = SystemWorker.exec(["sh", "-c", "pwd"], {					folder: function f1() {						var i = 234;						i++;					}				});		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #folder, expected Folder or String.', e.message);			hadException = true;		}		if (!hadException) Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testFolderParamFunction_Async_APIv2: function() {		var hadException = false;		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "cd"], {					folder: function f1() {						var i = 234;						i++;					}				});			else				sWorker = new SystemWorker(["sh", "-c", "pwd"], {					folder: function f1() {						var i = 234;						i++;					}				});		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #folder, expected Folder or String.', e.message);			hadException = true;		}		if (!hadException) Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testFolderParamObject_APIv2: function() {		var hadException = false;		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "cd"], {					folder: {						p1: "val1",						p2: "val2"					}				});			else				result = SystemWorker.exec(["sh", "-c", "pwd"], {					folder: {						p1: "val1",						p2: "val2"					}				});		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #folder, expected Folder or String.', e.message);			hadException = true;		}		if (!hadException) Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testFolderParamObject_Async_APIv2: function() {		var hadException = false;		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "cd"], {					folder: {						p1: "val1",						p2: "val2"					}				});			else				sWorker = new SystemWorker(["sh", "-c", "pwd"], {					folder: {						p1: "val1",						p2: "val2"					}				});		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #folder, expected Folder or String.', e.message);			hadException = true;		}		if (!hadException) Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testVariablesParamNull_APIv2: function() {		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "cd"], {					variables: null				});			else				result = SystemWorker.exec(["sh", "-c", "pwd"], {					variables: null				});		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		Y.Assert.isNotNull(result, 'result should not be null');		Y.Assert.isInstanceOf(Buffer, result.output);		var strPath = result.output.toString();		Y.Assert.areNotSame(0, strPath.length, 'Path length should be greater then 0.');	},	testVariablesParamNull_Async_APIv2: function() {		var sWorker;		var strPath = "";		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "cd"], {					variables: null				});			else				sWorker = new SystemWorker(["sh", "-c", "pwd"], {					variables: null				});		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		sWorker.onmessage = function(e) {			strPath += arguments[0].data.toString();		};		sWorker.onerror = function(e) {			strPath += arguments[0].data.toString();		};		sWorker.onterminated = function() {			exitWait();		}		wait(3000);		Y.Assert.areNotSame(0, strPath.length, 'Path length should be greater then 0.');	},	testVariablesParamEmptyObj_APIv2: function() {		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "cd"], {					variables: {}				});			else				result = SystemWorker.exec(["sh", "-c", "pwd"], {					variables: {}				});		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		Y.Assert.isNotNull(result, 'result should not be null');		Y.Assert.isInstanceOf(Buffer, result.output);		var strPath = result.output.toString();		Y.Assert.areNotSame(0, strPath.length, 'Path length should be greater then 0.');	},	testVariablesParamEmptyObj_Async_APIv2: function() {		var sWorker;		var strPath = "";		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "cd"], {					variables: {}				});			else				sWorker = new SystemWorker(["sh", "-c", "pwd"], {					variables: {}				});		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		sWorker.onmessage = function(e) {			strPath += arguments[0].data.toString();		};		sWorker.onerror = function(e) {			strPath += arguments[0].data.toString();		};		sWorker.onterminated = function() {			exitWait();		}		wait(3000);		Y.Assert.areNotSame(0, strPath.length, 'Path length should be greater then 0.');	},	testVariablesParamNumber_APIv2: function() {		var hadException = false;		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "cd"], {					variables: 123				});			else				result = SystemWorker.exec(["sh", "-c", "pwd"], {					variables: 123				});		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #variables, expected Object.', e.message);			hadException = true;		}		if (!hadException) Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testVariablesParamNumber_Async_APIv2: function() {		var hadException = false;		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "cd"], {					variables: 123				});			else				sWorker = new SystemWorker(["sh", "-c", "pwd"], {					variables: 123				});		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #variables, expected Object.', e.message);			hadException = true;		}		if (!hadException) Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testVariablesParamString_APIv2: function() {		var hadException = false;		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "cd"], {					variables: ""				});			else				result = SystemWorker.exec(["sh", "-c", "pwd"], {					variables: ""				});		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #variables, expected Object.', e.message);			hadException = true;		}		if (!hadException) Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testVariablesParamString_Async_APIv2: function() {		var hadException = false;		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "cd"], {					variables: ""				});			else				sWorker = new SystemWorker(["sh", "-c", "pwd"], {					variables: ""				});		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #variables, expected Object.', e.message);			hadException = true;		}		if (!hadException) Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testVariablesParamBool_APIv2: function() {		var hadException = false;		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "cd"], {					variables: true				});			else				result = SystemWorker.exec(["sh", "-c", "pwd"], {					variables: true				});		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #variables, expected Object.', e.message);			hadException = true;		}		if (!hadException) Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testVariablesParamBool_Async_APIv2: function() {		var hadException = false;		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "cd"], {					variables: true				});			else				sWorker = new SystemWorker(["sh", "-c", "pwd"], {					variables: true				});		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #variables, expected Object.', e.message);			hadException = true;		}		if (!hadException) Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testVariableUsage_Async_APIv2: function() {		var strEcho = "";		var sWorker = null;		var params = {			parameters: null,			variables: {				TST: "oh yeah",				DDD_SERGIY: "Dark Darker Darkest"			}		};		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "set", "DDD_SERGIY"], params);			else				sWorker = new SystemWorker(["sh", "-c", "echo $DDD_SERGIY"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		sWorker.onmessage = function(e) {			strEcho += arguments[0].data.toString();		};		sWorker.onerror = function(e) {			strEcho += arguments[0].data.toString();		};		sWorker.onterminated = function() {			exitWait();		}		wait(3000);		var strExpected = "";		if (os.isWindows)			strExpected = "DDD_SERGIY=Dark Darker Darkest" + String.fromCharCode(13) + String.fromCharCode(10);		else			strExpected = "Dark Darker Darkest" + String.fromCharCode(10);		Y.Assert.areSame(strExpected, strEcho, 'Result should be "' + strExpected + '"');	},	testVariableUsage_APIv2: function() {		var hadException = false;		var params = {			parameters: null,			variables: {				TST: "oh yeah",				DDD_SERGIY: "Dark Darker Darkest"			}		};		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "set", "DDD_SERGIY"], params);			else				result = SystemWorker.exec(["sh", "-c", "echo $DDD_SERGIY"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));			hadException = true;		}		Y.Assert.isNotNull(result, 'result should not be null');		Y.Assert.isInstanceOf(Buffer, result.output);		var strExpected = "";		if (os.isWindows)			strExpected = "DDD_SERGIY=Dark Darker Darkest" + String.fromCharCode(13) + String.fromCharCode(10);		else			strExpected = "Dark Darker Darkest" + String.fromCharCode(10);		var strResult = result.output.toString();		Y.Assert.areSame(strExpected, strResult, 'Result should be DDD_SERGIY');	},		testQuoteUsage_APIv2: function() {		var hadException = false;		var params = {			parameters: {				param1: "test quote"			},			quote: "'"		};		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "echo", "{param1}"], params);			else				result = SystemWorker.exec(["sh", "-c", "echo {param1}"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));			hadException = true;		}		Y.Assert.isNotNull(result, 'result should not be null');		Y.Assert.isInstanceOf(Buffer, result.output);		var strExpected = "";		if (os.isWindows)			strExpected = "'test quote'" + String.fromCharCode(13) + String.fromCharCode(10);		else			strExpected = "test quote" + String.fromCharCode(10);		var strResult = result.output.toString();		Y.Assert.areSame(strExpected, strResult, 'Result should be: test quote');	},	testQuoteUsage_Async_APIv2: function() {		var strEcho = "";		var sWorker = null;		var params = {			parameters: {				param1: "test quote"			},			quote: "'"		};		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "echo", "{param1}"], params);			else				sWorker = new SystemWorker(["sh", "-c", "echo {param1}"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		sWorker.onmessage = function(e) {			strEcho += arguments[0].data.toString();		};		sWorker.onerror = function(e) {			strEcho += arguments[0].data.toString();		};		sWorker.onterminated = function() {			exitWait();		}		wait(3000);		var strExpected = "";		if (os.isWindows)			strExpected = "'test quote'" + String.fromCharCode(13) + String.fromCharCode(10);		else			strExpected = "test quote" + String.fromCharCode(10);		Y.Assert.areSame(strExpected, strEcho, 'Result should be "' + strExpected + '"');	},		testQuoteNull_APIv2: function() {		var hadException = false;		var params = {			quote: null		};		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "echo", "test"], params);			else				result = SystemWorker.exec(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));			hadException = true;		}		Y.Assert.isNotNull(result, 'result should not be null');		Y.Assert.isInstanceOf(Buffer, result.output);	},	testQuoteNull_Async_APIv2: function() {		var strEcho = "";		var sWorker = null;		var params = {			quote: null		};		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "echo", "test"], params);			else				sWorker = new SystemWorker(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		sWorker.onmessage = function(e) {			strEcho += arguments[0].data.toString();		};		sWorker.onerror = function(e) {			strEcho += arguments[0].data.toString();		};		sWorker.onterminated = function() {			exitWait();		}		wait(3000);	},	testQuoteUndefined_APIv2: function() {		var hadException = false;		var qtUndef;		var params = {			quote: qtUndef		};		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "echo", "test"], params);			else				result = SystemWorker.exec(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));			hadException = true;		}		Y.Assert.isNotNull(result, 'result should not be null');		Y.Assert.isInstanceOf(Buffer, result.output);	},	testQuoteUndefined_Async_APIv2: function() {		var strEcho = "";		var sWorker = null;		var qtUndef;		var params = {			quote: qtUndef		};		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "echo", "test"], params);			else				sWorker = new SystemWorker(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		sWorker.onmessage = function(e) {			strEcho += arguments[0].data.toString();		};		sWorker.onerror = function(e) {			strEcho += arguments[0].data.toString();		};		sWorker.onterminated = function() {			exitWait();		}		wait(3000);	},		testQuoteNumber_APIv2: function() {		var hadException = false;		var params = {			quote: 42		};		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "echo", "test"], params);			else				result = SystemWorker.exec(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #quote, expected String.', e.message);			hadException = true;		}		if (!hadException)			Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testQuoteNumber_Async_APIv2: function() {		var hadException = false;		var sWorker = null;		var params = {			quote: 42		};		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "echo", "test"], params);			else				sWorker = new SystemWorker(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #quote, expected String.', e.message);			hadException = true;		}		if (!hadException)			Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testQuoteObject_APIv2: function() {		var hadException = false;		var params = {			quote: {				attr1: "value1"			}		};		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "echo", "test"], params);			else				result = SystemWorker.exec(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #quote, expected String.', e.message);			hadException = true;		}		if (!hadException)			Y.Assert.fail('A "wrong type" error should have been thrown.');	},		testQuoteObject_Async_APIv2: function() {		var hadException = false;		var sWorker = null;		var params = {			quote: {				attr1: "value1"			}		};		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "echo", "test"], params);			else				sWorker = new SystemWorker(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #quote, expected String.', e.message);			hadException = true;		}		if (!hadException)			Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testQuoteFunction_APIv2: function() {		var hadException = false;		var params = {			quote: function fnfn() {				var vrbl = 123;				vrbl++;				return vrbl;			}		};		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "echo", "test"], params);			else				result = SystemWorker.exec(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #quote, expected String.', e.message);			hadException = true;		}		if (!hadException)			Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testQuoteFunction_Async_APIv2: function() {		var hadException = false;		var sWorker = null;		var params = {			quote: function fnfn() {				var vrbl = 123;				vrbl++;				return vrbl;			}		};		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "echo", "test"], params);			else				sWorker = new SystemWorker(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #quote, expected String.', e.message);			hadException = true;		}		if (!hadException)			Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testStdInUsage_APIv2: function() {		var hadException = false;		var params = {			stdin: "hey there"		};		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "echo", "ptn hlo"], params);			else				result = SystemWorker.exec(["sh", "-c", "echo ptn hlo"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));			hadException = true;		}		Y.Assert.isNotNull(result, 'result should not be null');		Y.Assert.isInstanceOf(Buffer, result.output);	},		testStdInUsage_Async_APIv2: function() {		var strEcho = "";		var sWorker = null;		var params = {			stdin: "hey there"		};		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "echo", "ptn hlo"], params);			else				sWorker = new SystemWorker(["sh", "-c", "echo ptn hlo"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}	},	testStdInNull_APIv2: function() {		var hadException = false;		var params = {			stdin: null		};		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "echo", "test"], params);			else				result = SystemWorker.exec(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));			hadException = true;		}		Y.Assert.isNotNull(result, 'result should not be null');		Y.Assert.isInstanceOf(Buffer, result.output);	},	testStdInNull_Async_APIv2: function() {		var strEcho = "";		var sWorker = null;		var params = {			stdin: null		};		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "echo", "test"], params);			else				sWorker = new SystemWorker(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		sWorker.onmessage = function(e) {			strEcho += arguments[0].data.toString();		};		sWorker.onerror = function(e) {			strEcho += arguments[0].data.toString();		};		sWorker.onterminated = function() {			exitWait();		}		wait(3000);	},	testStdInUndefined_APIv2: function() {		var hadException = false;		var qtUndef;		var params = {			stdin: qtUndef		};		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "echo", "test"], params);			else				result = SystemWorker.exec(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));			hadException = true;		}		Y.Assert.isNotNull(result, 'result should not be null');		Y.Assert.isInstanceOf(Buffer, result.output);	},		testStdInUndefined_Async_APIv2: function() {		var strEcho = "";		var sWorker = null;		var qtUndef;		var params = {			stdin: qtUndef		};		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "echo", "test"], params);			else				sWorker = new SystemWorker(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		sWorker.onmessage = function(e) {			strEcho += arguments[0].data.toString();		};		sWorker.onerror = function(e) {			strEcho += arguments[0].data.toString();		};		sWorker.onterminated = function() {			exitWait();		}		wait(3000);	},	testStdInNumber_APIv2: function() {		var hadException = false;		var params = {			stdin: 42		};		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "echo", "test"], params);			else				result = SystemWorker.exec(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #stdin, expected String.', e.message);			hadException = true;		}		if (!hadException)			Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testStdInNumber_Async_APIv2: function() {		var hadException = false;		var sWorker = null;		var params = {			stdin: 42		};		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "echo", "test"], params);			else				sWorker = new SystemWorker(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #stdin, expected String.', e.message);			hadException = true;		}		if (!hadException)			Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testStdInObject_APIv2: function() {		var hadException = false;		var params = {			stdin: {				attr1: "value1"			}		};		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "echo", "test"], params);			else				result = SystemWorker.exec(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #stdin, expected String.', e.message);			hadException = true;		}		if (!hadException)			Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testStdInObject_Async_APIv2: function() {		var hadException = false;		var sWorker = null;		var params = {			stdin: {				attr1: "value1"			}		};		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "echo", "test"], params);			else				sWorker = new SystemWorker(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #stdin, expected String.', e.message);			hadException = true;		}		if (!hadException)			Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testStdInFunction_APIv2: function() {		var hadException = false;		var params = {			stdin: function fnfn() {				var vrbl = 123;				vrbl++;				return vrbl;			}		};		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "echo", "test"], params);			else				result = SystemWorker.exec(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #stdin, expected String.', e.message);			hadException = true;		}		if (!hadException)			Y.Assert.fail('A "wrong type" error should have been thrown.');	},		testStdInFunction_Async_APIv2: function() {		var hadException = false;		var sWorker = null;		var params = {			stdin: function fnfn() {				var vrbl = 123;				vrbl++;				return vrbl;			}		};		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "echo", "test"], params);			else				sWorker = new SystemWorker(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #stdin, expected String.', e.message);			hadException = true;		}		if (!hadException)			Y.Assert.fail('A "wrong type" error should have been thrown.');	},	testKillProcTreeUsage_APIv2: function() {		var hadException = false;		var params = {			kill_process_tree: false		};		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "echo", "ptn hlo"], params);			else				result = SystemWorker.exec(["sh", "-c", "echo ptn hlo"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));			hadException = true;		}		Y.Assert.isNotNull(result, 'result should not be null');		Y.Assert.isInstanceOf(Buffer, result.output);	},		testKillProcTreeUsage_Async_APIv2: function() {		var strEcho = "";		var sWorker = null;		var params = {			kill_process_tree: false		};		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "echo", "ptn hlo"], params);			else				sWorker = new SystemWorker(["sh", "-c", "echo ptn hlo"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}	},	testKillProcTreeNull_APIv2: function() {		var hadException = false;		var params = {			kill_process_tree: null		};		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "echo", "test"], params);			else				result = SystemWorker.exec(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));			hadException = true;		}		Y.Assert.isNotNull(result, 'result should not be null');		Y.Assert.isInstanceOf(Buffer, result.output);	},	testKillProcTreeNull_Async_APIv2: function() {		var strEcho = "";		var sWorker = null;		var params = {			kill_process_tree: null		};		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "echo", "test"], params);			else				sWorker = new SystemWorker(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		sWorker.onmessage = function(e) {			strEcho += arguments[0].data.toString();		};		sWorker.onerror = function(e) {			strEcho += arguments[0].data.toString();		};		sWorker.onterminated = function() {			exitWait();		}		wait(3000);	},		testKillProcTreeUndefined_APIv2: function() {		var hadException = false;		var qtUndef;		var params = {			kill_process_tree: qtUndef		};		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "echo", "test"], params);			else				result = SystemWorker.exec(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));			hadException = true;		}		Y.Assert.isNotNull(result, 'result should not be null');		Y.Assert.isInstanceOf(Buffer, result.output);	},		testKillProcTreeUndefined_Async_APIv2: function() {		var strEcho = "";		var sWorker = null;		var qtUndef;		var params = {			kill_process_tree: qtUndef		};		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "echo", "test"], params);			else				sWorker = new SystemWorker(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.fail('An exception has been thrown: ' + JSON.stringify(e));		}		sWorker.onmessage = function(e) {			strEcho += arguments[0].data.toString();		};		sWorker.onerror = function(e) {			strEcho += arguments[0].data.toString();		};		sWorker.onterminated = function() {			exitWait();		}		wait(3000);	},		testKillProcTreeNumber_APIv2: function() {		var hadException = false;		var params = {			kill_process_tree: 42		};		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "echo", "test"], params);			else				result = SystemWorker.exec(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #kill_process_tree, expected Boolean.', e.message);			hadException = true;		}		if (!hadException)			Y.Assert.fail('A "wrong type" error should have been thrown.');	},		testKillProcTreeNumber_Async_APIv2: function() {		var hadException = false;		var sWorker = null;		var params = {			kill_process_tree: 42		};		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "echo", "test"], params);			else				sWorker = new SystemWorker(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #kill_process_tree, expected Boolean.', e.message);			hadException = true;		}		if (!hadException)			Y.Assert.fail('A "wrong type" error should have been thrown.');	},		testKillProcTreeObject_APIv2: function() {		var hadException = false;		var params = {			kill_process_tree: {				attr1: "value1"			}		};		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "echo", "test"], params);			else				result = SystemWorker.exec(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #kill_process_tree, expected Boolean.', e.message);			hadException = true;		}		if (!hadException)			Y.Assert.fail('A "wrong type" error should have been thrown.');	},		testKillProcTreeObject_Async_APIv2: function() {		var hadException = false;		var sWorker = null;		var params = {			kill_process_tree: {				attr1: "value1"			}		};		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "echo", "test"], params);			else				sWorker = new SystemWorker(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #kill_process_tree, expected Boolean.', e.message);			hadException = true;		}		if (!hadException)			Y.Assert.fail('A "wrong type" error should have been thrown.');	},		testKillProcTreeFunction_APIv2: function() {		var hadException = false;		var params = {			kill_process_tree: function fnfn() {				var vrbl = 123;				vrbl++;				return vrbl;			}		};		try {			if (os.isWindows)				result = SystemWorker.exec(["cmd", "/C", "echo", "test"], params);			else				result = SystemWorker.exec(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #kill_process_tree, expected Boolean.', e.message);			hadException = true;		}		if (!hadException)			Y.Assert.fail('A "wrong type" error should have been thrown.');	},		testKillProcTreeFunction_Async_APIv2: function() {		var hadException = false;		var sWorker = null;		var params = {			kill_process_tree: function fnfn() {				var vrbl = 123;				vrbl++;				return vrbl;			}		};		try {			if (os.isWindows)				sWorker = new SystemWorker(["cmd", "/C", "echo", "test"], params);			else				sWorker = new SystemWorker(["sh", "-c", "echo test"], params);		} catch (e) {			Y.Assert.areSame('Wrong type for parameter #kill_process_tree, expected Boolean.', e.message);			hadException = true;		}		if (!hadException)			Y.Assert.fail('A "wrong type" error should have been thrown.');	}};