/*
* This file is part of Wakanda software, licensed by 4D under
*  (i) the GNU General Public License version 3 (GNU GPL v3), or
*  (ii) the Affero General Public License version 3 (AGPL v3) or
*  (iii) a commercial license.
* This file remains the exclusive property of 4D and/or its licensors
* and is protected by national and international legislations.
* In any event, Licensee's compliance with the terms and conditions
* of the applicable license constitutes a prerequisite to any use of this file.
* Except as otherwise expressly stated in the applicable license,
* such license does not include any other license or rights on this file,
* 4D's and/or its licensors' trademarks and/or other proprietary rights.
* Consequently, no title, copyright or other proprietary rights
* other than those specified in the applicable license is granted.
*/
////////////////////////////////////////////////////////////////////////////////////	Test Node JS net API - tests are done according Node.js doc :////	http://nodejs.org/docs/v0.6.6/api/net.html//////////////////////////////////////////////////////////////////////////////////function testCheckNetAPI() {		Y.Assert.isObject(net.createServer, 		"Check createServer method exists : ");	//Y.Assert.isObject(net.connect, 			"Check connect  exists : ");	Y.Assert.isObject(net.createConnection, 	"Check createConnection method exists : ");	Y.Assert.isObject(net.Server, 				"Check Server method exists : ");}function testCheckNetAPI_connect_first_param_1() {		var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.connect(undefined);				Y.Assert.fail('connect accept bad first parameter <undefined>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <undefined> !')}function testCheckNetAPI_connect_first_param_2() {		var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.connect(null);				Y.Assert.fail('connect accept bad first parameter <null>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <null> !')}function testCheckNetAPI_connect_first_param_3() {		var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.connect(1234);				Y.Assert.fail('connect accept bad first parameter <1234>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <1234> !')}function testCheckNetAPI_connect_first_param_4() {		var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.connect("hello");				Y.Assert.fail('connect accept bad first parameter <"hello">');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <"hello"> !')}//cas qui rÃ©ussifunction testCheckNetAPI_connect_first_param_5() {		var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.connect(8080);	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isFalse(didFail, 'connect failed with good parameter <8080> !')}function testCheckNetAPI_connect_second_param_1() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.connect(8080, undefined);				Y.Assert.fail('connect accept bad second parameter <undefined>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <undefined> !')}function testCheckNetAPI_connect_second_param_2() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.connect(8080, null);				Y.Assert.fail('connect accept bad second parameter <null>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <null> !')}function testCheckNetAPI_connect_second_param_3() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.connect(8080, 1234);				Y.Assert.fail('connect accept bad second parameter <1234>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <1234> !')}function testCheckNetAPI_connect_second_param_4() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.connect(8080, "hello");				Y.Assert.fail('connect accept bad second parameter <"hello">');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <"hello"> !')}//cas qui rÃ©ussifunction testCheckNetAPI_connect_second_param_5() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.connect(8080, "127.0.0.1");			}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isFalse(didFail, 'connect failed with good parameter <"127.0.0.1"> !')}//cas qui rÃ©ussifunction testCheckNetAPI_connect_second_param_6() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.connect(8080, "localhost");			}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isFalse(didFail, 'connect failed with good parameter <"localhost"> !')}function testCheckNetAPI_createConnection_first_param_1() {		var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.createConnection(undefined);				Y.Assert.fail('createConnection accept bad first parameter <undefined>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "createConnection Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'createConnection succeed with bad parameter <undefined> !')}function testCheckNetAPI_createConnection_first_param_2() {		var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.createConnection(null);				Y.Assert.fail('createConnection accept bad first parameter <null>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "createConnection Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'createConnection succeed with bad parameter <null> !')}function testCheckNetAPI_createConnection_first_param_3() {		var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.createConnection(1234);				Y.Assert.fail('createConnection accept bad first parameter <1234>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "createConnection Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'createConnection succeed with bad parameter <1234> !')}function testCheckNetAPI_createConnection_first_param_4() {		var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.createConnection("hello");				Y.Assert.fail('createConnection accept bad first parameter <"hello">');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "createConnection Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'createConnection succeed with bad parameter <"hello"> !')}//cas qui rÃ©ussifunction testCheckNetAPI_createConnection_first_param_5() {		var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.createConnection(8080);			}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "createConnection Failure : Found an exception with no message !");				}		Y.Assert.isFalse(didFail, 'createConnection failed with good parameter <8080> !')}function testCheckNetAPI_createConnection_second_param_1() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.createConnection(8080, undefined);				Y.Assert.fail('createConnection accept bad second parameter <undefined>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "createConnection Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'createConnection succeed with bad parameter <undefined> !')}function testCheckNetAPI_createConnection_second_param_2() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.createConnection(8080, null);				Y.Assert.fail('createConnection accept bad second parameter <null>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "createConnection Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'createConnection succeed with bad parameter <null> !')}function testCheckNetAPI_createConnection_second_param_3() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.createConnection(8080, 1234);				Y.Assert.fail('createConnection accept bad second parameter <1234>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "createConnection Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'createConnection succeed with bad parameter <1234> !')}function testCheckNetAPI_createConnection_second_param_4() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.createConnection(8080, "hello");				Y.Assert.fail('createConnection accept bad second parameter <"hello">');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "createConnection Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'createConnection succeed with bad parameter <"hello"> !')}//cas qui rÃ©ussifunction testCheckNetAPI_createConnection_second_param_5() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.createConnection(8080, "127.0.0.1");			}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "createConnection Failure : Found an exception with no message !");				}		Y.Assert.isFalse(didFail, 'createConnection failed with good parameter <"127.0.0.1"> !')}//cas qui rÃ©ussifunction testCheckNetAPI_createConnection_second_param_6() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.createConnection(8080, "localhost");			}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "createConnection Failure : Found an exception with no message !");				}		Y.Assert.isFalse(didFail, 'createConnection failed with good parameter <"localhost"> !')}//////////////////////////////////////////////////////////////////////////////////// Create an echo server and test it//////////////////////////////////////////////////////////////////////////////////function testPerformEcho() {	    var srvLog=new Log("echoServerLog.txt");    srvLog.date();        var srv=net.createServer(function(sock) {        sock.addListener('data', function(data) {            srvLog.date().append("Data !")                        srvLog.date().append("Echo <").append(data).append(">");            sock.write("ECHO <");            sock.write(data);            sock.write(">");            sock.end();                                 });                sock.addListener('end', function() {            srvLog.date().append("End !");        });                sock.addListener('close', function()  {            srvLog.append("Close !");                         //sock.destroy();    //BUG ??? Cela ne devrait-il pas entrainer un evenement close cote client ?                                });    }).listen(1234, "127.0.0.1");        var cliLog=new Log("echoClientLog.txt");    cliLog.date();        var responseBuf=new Buffer(0);    var sock=new net.Socket();    sock.connect(1234, "127.0.0.1", function() {        requestBuf=new Buffer("HELLO !");        cliLog.append("Request...").append(requestBuf.toString('utf8', 0, requestBuf.length));        sock.write(requestBuf);        //sock.end(); BUG ??? Provoque parfois un '[thrown expression] Error Write failed' dans l'evenement data du serveur, bloque le test le reste du temps        sock.addListener('data', function(buf) {            cliLog.append("Response...").append(buf.toString('utf8', 0, buf.length));                        responseBuf=ConcatBuffers(responseBuf, buf);        });        sock.addListener('end', function() {            cliLog.append("End !");                        exitWait();        });        sock.addListener('close', function(err) {            if(!err)                cliLog.append("Close (no error) !");            else {                cliLog.append("Close (with error) !");                Y.Assert.isFalse(error, "Connection closed with an error.");            }        });    });        wait();        var responseString=responseBuf.toString('utf8', 0, responseBuf.length);    Y.Assert.isTrue(responseString=="ECHO <HELLO !>", "Check echoed data integrity : ");        sock.destroy();        //srv.close(); BUG ??? "Unexpected error: 'null' is not an object (evaluating 'srv.close')"        //Comment arrÃªte-t-on le serveur ? Peut-on tester que le port 1234 est bien libÃ©rÃ© ?}//////////////////////////////////////////////////////////////////////////////////// Create an echo server and test it in loops//////////////////////////////////////////////////////////////////////////////////function testPerformRWLoop() {	var srv=net.createServer(function(sock) {			sock.addListener('end', function() {			sock.end();		});       		sock.addListener('data', function(data) {			sock.write(data)		});	}).listen(1235, "127.0.0.1");    var responseBuf=new Buffer(0);        var sock=new net.Socket();    var sentLen=0;    var recvLen=0;    sock.connect(1235, "127.0.0.1", function() {        //BUG ??? La taille max semble trÃ¨s basse !        var requestBuf=new Buffer(4000);        requestBuf.fill('!');                sock.addListener('data', function(buf) {            recvLen+=buf.length;                        //Verrue pour contourner le bug(?) du end()            if(recvLen==40000)                exitWait();        });        sock.addListener('end', function() {                                        Y.Assert.isTrue(sentLen==recvLen, "Check we received the same amount of data we sent");                        exitWait();        });        sock.addListener('close', function(err) {            if(err)                Y.Assert.isFalse(error, "Connection closed with an error.");            exitWait();        });                for(i=0 ; i<10 ; i++) {            sock.write(requestBuf);            sentLen+=requestBuf.length;        }                //Verrue pour contourner le bug(?) du end()        wait();                sock.end();    });        //wait();        Y.Assert.isTrue(sentLen==recvLen, "Check we received the same amount of data we sent");}