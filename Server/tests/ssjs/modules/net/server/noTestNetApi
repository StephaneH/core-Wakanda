//////////////////////////////////////////////////////////////////////////////////// testCase////	Jenkin's urls :////		- http://winqa.private.4d.fr:9080///		- http://macqa.private.4d.fr:9080///		- http://linuxqa.private.4d.fr:9080///////////////////////////////////////////////////////////////////////////////////var testCase ={	name: 'NodeJS Net API Tests',		_wait: {		before: 2500,		after:	2500	},	_should: {		ignore: {			}	},	setUp: function() {			},		"test Node JS net API - Method and properties exist" : testCheckNetAPI,		"test Node JS net API - Check connect method first parameter 1/5" : testCheckNetAPI_connect_first_param_1,	"test Node JS net API - Check connect method first parameter 2/5" : testCheckNetAPI_connect_first_param_2,	"test Node JS net API - Check connect method first parameter 3/5" : testCheckNetAPI_connect_first_param_3,	"test Node JS net API - Check connect method first parameter 4/5" : testCheckNetAPI_connect_first_param_4,//crash	"test Node JS net API - Check connect method first parameter 5/5" : testCheckNetAPI_connect_first_param_5,	"test Node JS net API - Check connect method second parameter 1/6" : testCheckNetAPI_connect_second_param_1,	"test Node JS net API - Check connect method second parameter 2/6" : testCheckNetAPI_connect_second_param_2,	"test Node JS net API - Check connect method second parameter 3/6" : testCheckNetAPI_connect_second_param_3,	"test Node JS net API - Check connect method second parameter 4/6" : testCheckNetAPI_connect_second_param_4,//crash	"test Node JS net API - Check connect method second parameter 5/6" : testCheckNetAPI_connect_second_param_5,//crash	"test Node JS net API - Check connect method second parameter 5/6" : testCheckNetAPI_connect_second_param_6,	"test Node JS net API - Check createConnection method first parameter 1/5" : testCheckNetAPI_createConnection_first_param_1,	"test Node JS net API - Check createConnection method first parameter 2/5" : testCheckNetAPI_createConnection_first_param_2,	"test Node JS net API - Check createConnection method first parameter 3/5" : testCheckNetAPI_createConnection_first_param_3,	"test Node JS net API - Check createConnection method first parameter 4/5" : testCheckNetAPI_createConnection_first_param_4,//crash	"test Node JS net API - Check createConnection method first parameter 5/5" : testCheckNetAPI_createConnection_first_param_5,		"test Node JS net API - Check createConnection method second parameter 1/6" : testCheckNetAPI_createConnection_second_param_1,	"test Node JS net API - Check createConnection method second parameter 2/6" : testCheckNetAPI_createConnection_second_param_2,	"test Node JS net API - Check createConnection method second parameter 3/6" : testCheckNetAPI_createConnection_second_param_3,	"test Node JS net API - Check createConnection method second parameter 4/6" : testCheckNetAPI_createConnection_second_param_4,//crash	"test Node JS net API - Check createConnection method second parameter 5/6" : testCheckNetAPI_createConnection_second_param_5,//crash	"test Node JS net API - Check createConnection method second parameter 6/6" : testCheckNetAPI_createConnection_second_param_6,	"test Node JS net.Socket API - Method and properties exist" : testCheckSocketAPI,		"test Node JS net.Socket API - Check connect method first parameter 1/5" : testCheckSocketAPI_connect_first_param_1,	"test Node JS net.Socket API - Check connect method first parameter 2/5" : testCheckSocketAPI_connect_first_param_2,	"test Node JS net.Socket API - Check connect method first parameter 3/5" : testCheckSocketAPI_connect_first_param_3,	"test Node JS net.Socket API - Check connect method first parameter 4/5" : testCheckSocketAPI_connect_first_param_4,	"test Node JS net.Socket API - Check connect method first parameter 5/5" : testCheckSocketAPI_connect_first_param_5,	"test Node JS net.Socket API - Check connect method second parameter 1/6" : testCheckSocketAPI_connect_second_param_1,	"test Node JS net.Socket API - Check connect method second parameter 2/6" : testCheckSocketAPI_connect_second_param_2,	"test Node JS net.Socket API - Check connect method second parameter 3/6" : testCheckSocketAPI_connect_second_param_3,	"test Node JS net.Socket API - Check connect method second parameter 4/6" : testCheckSocketAPI_connect_second_param_4,	"test Node JS net.Socket API - Check connect method second parameter 5/6" : testCheckSocketAPI_connect_second_param_5,	"test Node JS net.Socket API - Check connect method second parameter 6/6" : testCheckSocketAPI_connect_second_param_6,		"test Node JS net.Socket API - Check setEncoding method first parameter 1/7" : testCheckSocketAPI_setEncoding_first_param_1,	"test Node JS net.Socket API - Check setEncoding method first parameter 2/7" : testCheckSocketAPI_setEncoding_first_param_2,	"test Node JS net.Socket API - Check setEncoding method first parameter 3/7" : testCheckSocketAPI_setEncoding_first_param_3,	"test Node JS net.Socket API - Check setEncoding method first parameter 4/7" : testCheckSocketAPI_setEncoding_first_param_4,	"test Node JS net.Socket API - Check setEncoding method first parameter 5/7" : testCheckSocketAPI_setEncoding_first_param_5,	"test Node JS net.Socket API - Check setEncoding method first parameter 6/7" : testCheckSocketAPI_setEncoding_first_param_6,	"test Node JS net.Socket API - Check setEncoding method first parameter 7/7" : testCheckSocketAPI_setEncoding_first_param_7,	//Echoue "test Node JS net API event sequence with a client/server and one echo request" : testPerformEcho,//Echoue "test Node JS net API event sequence with a client/server and a socket.Write()/'data' listner loop" : testPerformRWLoop,//Echoue "test Node JS net API with an handcrafted http request and Wakanda web server" : testPerformSimpleGet,//Plus à jour "test Node JS tls API with an handcrafted https request and Wakanda web server" : testPerformSecureGet};//////////////////////////////////////////////////////////////////////////////////// Utils - Modules globaux qui posent pb si on les met ailleurs//////////////////////////////////////////////////////////////////////////////////var net=require('net'); var tls=require('tls');//////////////////////////////////////////////////////////////////////////////////// Utils - Tests if different objects contains a non empty error message//////////////////////////////////////////////////////////////////////////////////function errorMessageExists(err) {		if(typeof(err)=='string') {				if(err) {					return true;					}		else {						return false;					}	}		if(typeof(err.message)=='string') {				if(err.message) {					return true;					}		else {						return false;					}	}	return false;}//////////////////////////////////////////////////////////////////////////////////// Utils - A simple function that concat 2 buffers//////////////////////////////////////////////////////////////////////////////////function ConcatBuffers(buf1, buf2) {		var newBuf=new Buffer(buf1.length+buf2.length);		//jmo - Buffer bug on empty buffer copy ?	if(buf1.length>0)		buf1.copy(newBuf, 0, 0, buf1.length);		if(buf2.length>0)		buf2.copy(newBuf, buf1.length, 0, buf2.length);	return newBuf;}//////////////////////////////////////////////////////////////////////////////////// Utils - Basic log object, inspired by Wakanda doc//////////////////////////////////////////////////////////////////////////////////function Log(fileName) {		var log= {		init: function(fileName) {			return;	//no logs on Jenkin's						var logPath=getFolder("path");			logPath+=fileName;						var logFile=File(logPath);						if(logFile.exists)				logFile.remove();						logFile.create();						logFile.append						this.logFile=logFile;			},					append: function(msg) {			return log;	//no logs on Jenkin's			var logFile=this.logFile;						if(logFile!=null) {				if(!logFile.exists)					logFile.create();								var stream=TextStream(logFile, "write");				stream.write(msg+"\n");				stream.close();			}						return log;		},							date: function() {			return log;	//no logs on Jenkin's			var date=new Date();						this.append(date.toString())						return log;		},							logFile: null	}		log.init(fileName);		return log;}////////////////////////////////////////////////////////////////////////////////////	Test Node JS net API - tests are done according Node.js doc :////	http://nodejs.org/docs/v0.6.6/api/net.html//////////////////////////////////////////////////////////////////////////////////function testCheckNetAPI() {		Y.Assert.isObject(net.createServer, 		"Check createServer method exists : ");	//Y.Assert.isObject(net.connect, 			"Check connect  exists : ");	Y.Assert.isObject(net.createConnection, 	"Check createConnection method exists : ");	Y.Assert.isObject(net.Server, 				"Check Server method exists : ");}function testCheckNetAPI_connect_first_param_1() {		var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.connect(undefined);				Y.Assert.fail('connect accept bad first parameter <undefined>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <undefined> !')}function testCheckNetAPI_connect_first_param_2() {		var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.connect(null);				Y.Assert.fail('connect accept bad first parameter <null>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <null> !')}function testCheckNetAPI_connect_first_param_3() {		var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.connect(1234);				Y.Assert.fail('connect accept bad first parameter <1234>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <1234> !')}function testCheckNetAPI_connect_first_param_4() {		var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.connect("hello");				Y.Assert.fail('connect accept bad first parameter <"hello">');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <"hello"> !')}//cas qui réussifunction testCheckNetAPI_connect_first_param_5() {		var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.connect(8080);	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isFalse(didFail, 'connect failed with good parameter <8080> !')}function testCheckNetAPI_connect_second_param_1() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.connect(8080, undefined);				Y.Assert.fail('connect accept bad second parameter <undefined>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <undefined> !')}function testCheckNetAPI_connect_second_param_2() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.connect(8080, null);				Y.Assert.fail('connect accept bad second parameter <null>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <null> !')}function testCheckNetAPI_connect_second_param_3() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.connect(8080, 1234);				Y.Assert.fail('connect accept bad second parameter <1234>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <1234> !')}function testCheckNetAPI_connect_second_param_4() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.connect(8080, "hello");				Y.Assert.fail('connect accept bad second parameter <"hello">');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <"hello"> !')}//cas qui réussifunction testCheckNetAPI_connect_second_param_5() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.connect(8080, "127.0.0.1");			}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isFalse(didFail, 'connect failed with good parameter <"127.0.0.1"> !')}//cas qui réussifunction testCheckNetAPI_connect_second_param_6() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.connect(8080, "localhost");			}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isFalse(didFail, 'connect failed with good parameter <"localhost"> !')}function testCheckNetAPI_createConnection_first_param_1() {		var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.createConnection(undefined);				Y.Assert.fail('createConnection accept bad first parameter <undefined>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "createConnection Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'createConnection succeed with bad parameter <undefined> !')}function testCheckNetAPI_createConnection_first_param_2() {		var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.createConnection(null);				Y.Assert.fail('createConnection accept bad first parameter <null>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "createConnection Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'createConnection succeed with bad parameter <null> !')}function testCheckNetAPI_createConnection_first_param_3() {		var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.createConnection(1234);				Y.Assert.fail('createConnection accept bad first parameter <1234>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "createConnection Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'createConnection succeed with bad parameter <1234> !')}function testCheckNetAPI_createConnection_first_param_4() {		var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.createConnection("hello");				Y.Assert.fail('createConnection accept bad first parameter <"hello">');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "createConnection Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'createConnection succeed with bad parameter <"hello"> !')}//cas qui réussifunction testCheckNetAPI_createConnection_first_param_5() {		var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.createConnection(8080);			}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "createConnection Failure : Found an exception with no message !");				}		Y.Assert.isFalse(didFail, 'createConnection failed with good parameter <8080> !')}function testCheckNetAPI_createConnection_second_param_1() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.createConnection(8080, undefined);				Y.Assert.fail('createConnection accept bad second parameter <undefined>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "createConnection Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'createConnection succeed with bad parameter <undefined> !')}function testCheckNetAPI_createConnection_second_param_2() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.createConnection(8080, null);				Y.Assert.fail('createConnection accept bad second parameter <null>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "createConnection Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'createConnection succeed with bad parameter <null> !')}function testCheckNetAPI_createConnection_second_param_3() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.createConnection(8080, 1234);				Y.Assert.fail('createConnection accept bad second parameter <1234>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "createConnection Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'createConnection succeed with bad parameter <1234> !')}function testCheckNetAPI_createConnection_second_param_4() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.createConnection(8080, "hello");				Y.Assert.fail('createConnection accept bad second parameter <"hello">');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "createConnection Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'createConnection succeed with bad parameter <"hello"> !')}//cas qui réussifunction testCheckNetAPI_createConnection_second_param_5() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.createConnection(8080, "127.0.0.1");			}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "createConnection Failure : Found an exception with no message !");				}		Y.Assert.isFalse(didFail, 'createConnection failed with good parameter <"127.0.0.1"> !')}//cas qui réussifunction testCheckNetAPI_createConnection_second_param_6() {	var failWithException=false;	var failWithExceptionMessage=false;	try {		var client=net.createConnection(8080, "localhost");			}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	client=null;	var didFail=failWithException;	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "createConnection Failure : Found an exception with no message !");				}		Y.Assert.isFalse(didFail, 'createConnection failed with good parameter <"localhost"> !')}//////////////////////////////////////////////////////////////////////////////////// Create an echo server and test it//////////////////////////////////////////////////////////////////////////////////function testPerformEcho() {	    var srvLog=new Log("echoServerLog.txt");    srvLog.date();        var srv=net.createServer(function(sock) {        sock.addListener('data', function(data) {            srvLog.date().append("Data !")                        srvLog.date().append("Echo <").append(data).append(">");            sock.write("ECHO <");            sock.write(data);            sock.write(">");            sock.end();                                 });                sock.addListener('end', function() {            srvLog.date().append("End !");        });                sock.addListener('close', function()  {            srvLog.append("Close !");                         //sock.destroy();    //BUG ??? Cela ne devrait-il pas entrainer un evenement close cote client ?                                });    }).listen(1234, "127.0.0.1");        var cliLog=new Log("echoClientLog.txt");    cliLog.date();        var responseBuf=new Buffer(0);    var sock=new net.Socket();    sock.connect(1234, "127.0.0.1", function() {        requestBuf=new Buffer("HELLO !");        cliLog.append("Request...").append(requestBuf.toString('utf8', 0, requestBuf.length));        sock.write(requestBuf);        //sock.end(); BUG ??? Provoque parfois un '[thrown expression] Error Write failed' dans l'evenement data du serveur, bloque le test le reste du temps        sock.addListener('data', function(buf) {            cliLog.append("Response...").append(buf.toString('utf8', 0, buf.length));                        responseBuf=ConcatBuffers(responseBuf, buf);        });        sock.addListener('end', function() {            cliLog.append("End !");                        exitWait();        });        sock.addListener('close', function(err) {            if(!err)                cliLog.append("Close (no error) !");            else {                cliLog.append("Close (with error) !");                Y.Assert.isFalse(error, "Connection closed with an error.");            }        });    });        wait();        var responseString=responseBuf.toString('utf8', 0, responseBuf.length);    Y.Assert.isTrue(responseString=="ECHO <HELLO !>", "Check echoed data integrity : ");        sock.destroy();        //srv.close(); BUG ??? "Unexpected error: 'null' is not an object (evaluating 'srv.close')"        //Comment arrête-t-on le serveur ? Peut-on tester que le port 1234 est bien libéré ?}//////////////////////////////////////////////////////////////////////////////////// Create an echo server and test it in loops//////////////////////////////////////////////////////////////////////////////////function testPerformRWLoop() {	var srv=net.createServer(function(sock) {			sock.addListener('end', function() {			sock.end();		});       		sock.addListener('data', function(data) {			sock.write(data)		});	}).listen(1235, "127.0.0.1");    var responseBuf=new Buffer(0);        var sock=new net.Socket();    var sentLen=0;    var recvLen=0;    sock.connect(1235, "127.0.0.1", function() {        //BUG ??? La taille max semble très basse !        var requestBuf=new Buffer(4000);        requestBuf.fill('!');                sock.addListener('data', function(buf) {            recvLen+=buf.length;                        //Verrue pour contourner le bug(?) du end()            if(recvLen==40000)                exitWait();        });        sock.addListener('end', function() {                                        Y.Assert.isTrue(sentLen==recvLen, "Check we received the same amount of data we sent");                        exitWait();        });        sock.addListener('close', function(err) {            if(err)                Y.Assert.isFalse(error, "Connection closed with an error.");            exitWait();        });                for(i=0 ; i<10 ; i++) {            sock.write(requestBuf);            sentLen+=requestBuf.length;        }                //Verrue pour contourner le bug(?) du end()        wait();                sock.end();    });        //wait();        Y.Assert.isTrue(sentLen==recvLen, "Check we received the same amount of data we sent");}////////////////////////////////////////////////////////////////////////////////////	Test Node JS net.Socket API - tests are done according Node.js doc :////	http://nodejs.org/docs/v0.6.6/api/net.html//////////////////////////////////////////////////////////////////////////////////function testCheckSocketAPI() {	var sock=new net.Socket();		Y.Assert.isObject(sock.connect,				"Check connect method exists : ");	Y.Assert.isNumber(sock.bufferSize, 			"Check bufferSize property exists : ");	Y.Assert.isObject(sock.setEncoding,			"Check setEncoding method exists : ");	Y.Assert.isObject(sock.setSecure,  			"Check setSecure method exists : ");	Y.Assert.isObject(sock.write, 				"Check write method exists : "); 	Y.Assert.isObject(sock.end, 				"Check end method exists : "); 	Y.Assert.isObject(sock.destroy, 			"Check destroy method exists : "); 	Y.Assert.isObject(sock.pause, 				"Check pause method exists : "); 	Y.Assert.isObject(sock.resume, 				"Check resume method exists : ");  	Y.Assert.isObject(sock.setTimeout,	 		"Check setTimeout method exists : ");  	Y.Assert.isObject(sock.setNoDelay, 			"Check setNoDelay method exists : ");  	Y.Assert.isObject(sock.setKeepAlive,	 	"Check setKeepAlive method exists : ");  	Y.Assert.isObject(sock.address,				"Check address property exists : ");  	Y.Assert.isUndefined(sock.remoteAddress,	"New remoteAddress property - Update the test ! ");  	//Y.Assert.isString(sock.remoteAddress, 	"Check remoteAddress property exists : ");  	Y.Assert.isUndefined(sock.remoteAddress, 	"New remoteAddress property - Update the test ! : ");	//Y.Assert.isNumber(sock.remotePort, 		"Check remotePort property exists : ");  	Y.Assert.isNumber(sock.bytesRead, 			"Check bytesRead property exists : ");  	Y.Assert.isNumber(sock.bytesWritten, 		"Check bytesWritten property exists : ");}function testCheckSocketAPI_connect_first_param_1() {	var failWithListener=false;	var failWithListenerMessage=false;		var failWithException=false;	var failWithExceptionMessage=false;	var sock=new net.Socket();		sock.addListener('error', function(err) {		failWithListener=true;		if(errorMessageExists(err))		{			failWithListenerMessage=true;			}			});	try {		sock.connect(undefined);				Y.Assert.fail('connect accept bad first parameter <undefined>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	sock=null;	var didFail=failWithListener||failWithException;	if(failWithListener) {					Y.Assert.isTrue(failWithListenerMessage, "connect Failure : Found an error listener with no message !");				}	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <undefined> !')}function testCheckSocketAPI_connect_first_param_2() {	var failWithListener=false;	var failWithListenerMessage=false;		var failWithException=false;	var failWithExceptionMessage=false;	var sock=new net.Socket();		sock.addListener('error', function(err) {		failWithListener=true;		if(errorMessageExists(err))		{			failWithListenerMessage=true;			}			});	try {		sock.connect(null);				Y.Assert.fail('connect accept bad first parameter <null>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	sock=null;	var didFail=failWithListener||failWithException;	if(failWithListener) {					Y.Assert.isTrue(failWithListenerMessage, "connect Failure : Found an error listener with no message !");				}	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <null> !')}function testCheckSocketAPI_connect_first_param_3() {	var failWithListener=false;	var failWithListenerMessage=false;		var failWithException=false;	var failWithExceptionMessage=false;	var sock=new net.Socket();		sock.addListener('error', function(err) {		failWithListener=true;		if(errorMessageExists(err))		{			failWithListenerMessage=true;			}			});	try {		sock.connect(1234);				Y.Assert.fail('connect accept bad first parameter <1234>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	sock=null;	var didFail=failWithListener||failWithException;	if(failWithListener) {					Y.Assert.isTrue(failWithListenerMessage, "connect Failure : Found an error listener with no message !");				}	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <1234> !')}function testCheckSocketAPI_connect_first_param_4() {	var failWithListener=false;	var failWithListenerMessage=false;		var failWithException=false;	var failWithExceptionMessage=false;	var sock=new net.Socket();		sock.addListener('error', function(err) {		failWithListener=true;		if(errorMessageExists(err))		{			failWithListenerMessage=true;			}			});	try {		sock.connect("hello");				Y.Assert.fail('connect accept bad first parameter <"hello">');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	sock=null;	var didFail=failWithListener||failWithException;	if(failWithListener) {					Y.Assert.isTrue(failWithListenerMessage, "connect Failure : Found an error listener with no message !");				}	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <"hello"> !')}//Cas qui réussi !function testCheckSocketAPI_connect_first_param_5() {	var failWithListener=false;	var failWithListenerMessage=false;		var failWithException=false;	var failWithExceptionMessage=false;	var sock=new net.Socket();		sock.addListener('error', function(err) {		failWithListener=true;		if(errorMessageExists(err))		{			failWithListenerMessage=true;			}			});	try {		sock.connect(8080);	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	sock=null;	var didFail=failWithListener||failWithException;	if(failWithListener) {					Y.Assert.isTrue(failWithListenerMessage, "connect Failure : Found an error listener with no message !");				}	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isFalse(didFail, 'connect failed with good parameter <8080> !')}function testCheckSocketAPI_connect_second_param_1() {	var failWithListener=false;	var failWithListenerMessage=false;		var failWithException=false;	var failWithExceptionMessage=false;	var sock=new net.Socket();		sock.addListener('error', function(err) {		failWithListener=true;		if(errorMessageExists(err))		{			failWithListenerMessage=true;			}			});	try {		sock.connect(8080, undefined);				Y.Assert.fail('connect accept bad second parameter <undefined>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	sock=null;	var didFail=failWithListener||failWithException;	if(failWithListener) {					Y.Assert.isTrue(failWithListenerMessage, "connect Failure : Found an error listener with no message !");				}	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <undefined> !')}function testCheckSocketAPI_connect_second_param_2() {	var failWithListener=false;	var failWithListenerMessage=false;		var failWithException=false;	var failWithExceptionMessage=false;	var sock=new net.Socket();		sock.addListener('error', function(err) {		failWithListener=true;		if(errorMessageExists(err))		{			failWithListenerMessage=true;			}			});	try {		sock.connect(8080, null);				Y.Assert.fail('connect accept bad second parameter <null>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	sock=null;	var didFail=failWithListener||failWithException;	if(failWithListener) {					Y.Assert.isTrue(failWithListenerMessage, "connect Failure : Found an error listener with no message !");				}	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <null> !')}function testCheckSocketAPI_connect_second_param_3() {	var failWithListener=false;	var failWithListenerMessage=false;		var failWithException=false;	var failWithExceptionMessage=false;	var sock=new net.Socket();		sock.addListener('error', function(err) {		failWithListener=true;		if(errorMessageExists(err))		{			failWithListenerMessage=true;			}			});	try {		sock.connect(8080, 1234);				Y.Assert.fail('connect accept bad second parameter <1234>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	sock=null;	var didFail=failWithListener||failWithException;	if(failWithListener) {					Y.Assert.isTrue(failWithListenerMessage, "connect Failure : Found an error listener with no message !");				}	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <1234> !')}function testCheckSocketAPI_connect_second_param_4() {	var failWithListener=false;	var failWithListenerMessage=false;		var failWithException=false;	var failWithExceptionMessage=false;	var sock=new net.Socket();		sock.addListener('error', function(err) {		failWithListener=true;		if(errorMessageExists(err))		{			failWithListenerMessage=true;			}			});	try {		sock.connect(8080, "hello");				Y.Assert.fail('connect accept bad second parameter <"hello">');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	sock=null;	var didFail=failWithListener||failWithException;	if(failWithListener) {					Y.Assert.isTrue(failWithListenerMessage, "connect Failure : Found an error listener with no message !");				}	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'connect succeed with bad parameter <"hello"> !')}//cas qui réussifunction testCheckSocketAPI_connect_second_param_5() {	var failWithListener=false;	var failWithListenerMessage=false;		var failWithException=false;	var failWithExceptionMessage=false;	var sock=new net.Socket();		sock.addListener('error', function(err) {		failWithListener=true;		if(errorMessageExists(err))		{			failWithListenerMessage=true;			}			});	try {		sock.connect(8080, "127.0.0.1");			}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	sock=null;	var didFail=failWithListener||failWithException;	if(failWithListener) {					Y.Assert.isTrue(failWithListenerMessage, "connect Failure : Found an error listener with no message !");				}	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isFalse(didFail, 'connect failed with good parameter <"127.0.0.1"> !')}//cas qui réussifunction testCheckSocketAPI_connect_second_param_6() {	var failWithListener=false;	var failWithListenerMessage=false;		var failWithException=false;	var failWithExceptionMessage=false;	var sock=new net.Socket();		sock.addListener('error', function(err) {		failWithListener=true;		if(errorMessageExists(err))		{			failWithListenerMessage=true;			}			});	try {		sock.connect(8080, "localhost");			}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	sock=null;	var didFail=failWithListener||failWithException;	if(failWithListener) {					Y.Assert.isTrue(failWithListenerMessage, "connect Failure : Found an error listener with no message !");				}	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "connect Failure : Found an exception with no message !");				}		Y.Assert.isFalse(didFail, 'connect failed with good parameter <"localhost"> !')}function testCheckSocketAPI_setEncoding_first_param_1() {	var failWithListener=false;	var failWithListenerMessage=false;		var failWithException=false;	var failWithExceptionMessage=false;	var sock=new net.Socket();		sock.addListener('error', function(err) {		failWithListener=true;		if(errorMessageExists(err))		{			failWithListenerMessage=true;			}			});	try {		sock.setEncoding(undefined);				Y.Assert.fail('sentEncoding accept bad first parameter <undefined>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	sock=null;	var didFail=failWithListener||failWithException;	if(failWithListener) {					Y.Assert.isTrue(failWithListenerMessage, "sentEncoding Failure : Found an error listener with no message !");				}	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "sentEncoding Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'sentEncoding succeed with bad parameter <undefined> !')}function testCheckSocketAPI_setEncoding_first_param_2() {	var failWithListener=false;	var failWithListenerMessage=false;		var failWithException=false;	var failWithExceptionMessage=false;	var sock=new net.Socket();		sock.addListener('error', function(err) {		failWithListener=true;		if(errorMessageExists(err))		{			failWithListenerMessage=true;			}			});	try {		sock.setEncoding(null);				Y.Assert.fail('sentEncoding accept bad first parameter <null>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	sock=null;	var didFail=failWithListener||failWithException;	if(failWithListener) {					Y.Assert.isTrue(failWithListenerMessage, "sentEncoding Failure : Found an error listener with no message !");				}	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "sentEncoding Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'sentEncoding succeed with bad parameter <null> !')}function testCheckSocketAPI_setEncoding_first_param_3() {	var failWithListener=false;	var failWithListenerMessage=false;		var failWithException=false;	var failWithExceptionMessage=false;	var sock=new net.Socket();		sock.addListener('error', function(err) {		failWithListener=true;		if(errorMessageExists(err))		{			failWithListenerMessage=true;			}			});	try {		sock.setEncoding(1234);				Y.Assert.fail('sentEncoding accept bad first parameter <1234>');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	sock=null;	var didFail=failWithListener||failWithException;	if(failWithListener) {					Y.Assert.isTrue(failWithListenerMessage, "sentEncoding Failure : Found an error listener with no message !");				}	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "sentEncoding Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'sentEncoding succeed with bad parameter <1234> !')}function testCheckSocketAPI_setEncoding_first_param_4() {	var failWithListener=false;	var failWithListenerMessage=false;		var failWithException=false;	var failWithExceptionMessage=false;	var sock=new net.Socket();		sock.addListener('error', function(err) {		failWithListener=true;		if(errorMessageExists(err))		{			failWithListenerMessage=true;			}			});	try {		sock.setEncoding("hello");				Y.Assert.fail('sentEncoding accept bad first parameter <"hello">');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	sock=null;	var didFail=failWithListener||failWithException;	if(failWithListener) {					Y.Assert.isTrue(failWithListenerMessage, "sentEncoding Failure : Found an error listener with no message !");				}	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "sentEncoding Failure : Found an exception with no message !");				}		Y.Assert.isTrue(didFail, 'sentEncoding succeed with bad parameter <"hello"> !')}//cas qui réussifunction testCheckSocketAPI_setEncoding_first_param_5() {	var failWithListener=false;	var failWithListenerMessage=false;		var failWithException=false;	var failWithExceptionMessage=false;	var sock=new net.Socket();		sock.addListener('error', function(err) {		failWithListener=true;		if(errorMessageExists(err))		{			failWithListenerMessage=true;			}			});	try {		sock.setEncoding('ascii');	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	sock=null;	var didFail=failWithListener||failWithException;	if(failWithListener) {					Y.Assert.isTrue(failWithListenerMessage, "sentEncoding Failure : Found an error listener with no message !");				}	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "sentEncoding Failure : Found an exception with no message !");				}		Y.Assert.isFalse(didFail, 'sentEncoding failed with good parameter <"ascii"> !')}//cas qui réussifunction testCheckSocketAPI_setEncoding_first_param_6() {	var failWithListener=false;	var failWithListenerMessage=false;		var failWithException=false;	var failWithExceptionMessage=false;	var sock=new net.Socket();		sock.addListener('error', function(err) {		failWithListener=true;		if(errorMessageExists(err))		{			failWithListenerMessage=true;			}			});	try {		sock.setEncoding("utf8");	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	sock=null;	var didFail=failWithListener||failWithException;	if(failWithListener) {					Y.Assert.isTrue(failWithListenerMessage, "sentEncoding Failure : Found an error listener with no message !");				}	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "sentEncoding Failure : Found an exception with no message !");				}		Y.Assert.isFalse(didFail, 'sentEncoding failed with good parameter <"utf8"> !')}//cas qui réussifunction testCheckSocketAPI_setEncoding_first_param_7() {	var failWithListener=false;	var failWithListenerMessage=false;		var failWithException=false;	var failWithExceptionMessage=false;	var sock=new net.Socket();		sock.addListener('error', function(err) {		failWithListener=true;		if(errorMessageExists(err))		{			failWithListenerMessage=true;			}			});	try {		sock.setEncoding("base64");	}	catch(err) {				failWithException=true;				if(errorMessageExists(err))		{			failWithExceptionMessage=true;		}			}		wait(123);	sock=null;	var didFail=failWithListener||failWithException;	if(failWithListener) {					Y.Assert.isTrue(failWithListenerMessage, "sentEncoding Failure : Found an error listener with no message !");				}	if(failWithException) {					Y.Assert.isTrue(failWithExceptionMessage, "sentEncoding Failure : Found an exception with no message !");				}		Y.Assert.isFalse(didFail, 'sentEncoding failed with good parameter <"base64"> !')}////////////////////////////////////////////////////////////////////////////////////	Test Node JS net.Server API - tests are done according Node.js doc :////	http://nodejs.org/docs/v0.6.6/api/net.html//////////////////////////////////////////////////////////////////////////////////function testCheckServerAPI() {	var srv=net.createServer(function(sock){});	Y.Assert.isObject(srv.listen,				"Check listen method exists : ");	Y.Assert.isObject(srv.pause,				"Check pause method exists : ");	Y.Assert.isObject(srv.close,				"Check close method exists : ");	Y.Assert.isObject(srv.address,				"Check address method exists : ");	//Y.Assert.isObject(srv.maxConnections,	"Check maxConnections method exists : ");	//Y.Assert.isObject(srv.connections,		"Check connections method exists : ");}//////////////////////////////////////////////////////////////////////////////////// Perform a basic HTTP request through socket ; Log request/response//////////////////////////////////////////////////////////////////////////////////function testPerformSimpleGet() {				var haïkuLog=new Log("haïku.txt");	haïkuLog.date();	var responseBuf=new Buffer(0);	var sock=new net.Socket();	sock.connect(8081, "127.0.0.1", function() {				requestBuf=new Buffer("GET /haiku.html HTTP/1.1\r\n\Host: 127.0.0.1:8081\r\n\\r\n"		);		haïkuLog.append("Request...").append(requestBuf.toString('utf8', 0, requestBuf.length));		sock.write(requestBuf);		sock.addListener('data', function(buf) {													haïkuLog.append("Response...").append(buf.toString('utf8', 0, buf.length));						responseBuf=ConcatBuffers(responseBuf, buf);		})				sock.addListener('end', function() {						haïkuLog.append("End !");									exitWait();			})				sock.addListener('close', function(err) {			if(!err)				haïkuLog.append("Close (no error) !");			else			{				haïkuLog.append("Close (with error) !");				Y.Assert.fail("Connection closed with an error.");			}									exitWait();			})				sock.addListener('error', function(err) {									exitWait();			})	})			//BUG - Le wait marche pas bien ! Mieux vaut trop que pas assez !	wait(123);	wait(123);	wait(123);	wait(123);	wait(123);			//Check the haïku integrity !	var responseString=responseBuf.toString('utf8', 0, responseBuf.length);	var pos1=responseString.indexOf('古池や', 0);	var pos2=responseString.indexOf('蛙飛込む', pos1);	var pos3=responseString.indexOf('水の音', pos2);		Y.Assert.isTrue(pos1>0 && pos2>pos1 && pos3>pos2, "Check read data integrity : ");	haïkuLog.date().append("Done !");	sock.destroy();}//////////////////////////////////////////////////////////////////////////////////// Perform a basic HTTPS request through socket ; Log request/response//////////////////////////////////////////////////////////////////////////////////function testPerformSecureGet() {		var haïkuLog=new Log("haïkuS.txt");	haïkuLog.date();	var responseBuf=new Buffer(0);	var sock=tls.connect(4434, "127.0.0.1", function() {		requestBuf=new Buffer("GET /haiku.html HTTP/1.1\r\n\Host: 127.0.0.1:4434\r\n\Connection: close\r\n\\r\n"		);				haïkuLog.append("Request...").append(requestBuf.toString('utf8', 0, requestBuf.length));		sock.write(requestBuf);		sock.addListener('data', function(buf) {										haïkuLog.append("Response...").append(buf.toString('utf8', 0, buf.length));						responseBuf=ConcatBuffers(responseBuf, buf);		})				sock.addListener('end', function() {			haïkuLog.append("End !");						exitWait();			})				sock.addListener('close', function(err) {			if(!err)				haïkuLog.append("Close (no error) !");			else				haïkuLog.append("Close (with error) !");			Y.Assert.isFalse(error, "Connection closed with an error.");						exitWait();			})	})		wait();		//Check the haïku integrity !	var responseString=responseBuf.toString('utf8', 0, responseBuf.length);	var pos1=responseString.indexOf('古池や', 0);	var pos2=responseString.indexOf('蛙飛込む', pos1);	var pos3=responseString.indexOf('水の音', pos2);		Y.Assert.isTrue(pos1>0 && pos2>pos1 && pos3>pos2, "Check read data integrity : ");	haïkuLog.date().append("Done !");	sock.destroy();}//////////////////////////////////////////////////////////////////////////////////// Run tests from Wakanda Studio////////////////////////////////////////////////////////////////////////////////////require("unitTest").run(testCase).getReport();