#
# Auto completion informations for vim (or other if needed)
#

set(__AUTOCOMPLETION_INCLUDE_LIST "")



macro(completion_path path)
	# canonicalize the given path, for beauty of course, and to avoid dupplicates
	get_filename_component(__newpath_completion "${path}" REALPATH)
	list(APPEND __AUTOCOMPLETION_INCLUDE_LIST "${__newpath_completion}")
	unset(__newpath_completion)
endmacro()




macro(completion_write)
	message(STATUS "Generating autocompletion settings")

	# automatically add all include directories provided for all targets
	target_list(alltargets)
	foreach (element ${alltargets})
		target_get_include_directories(allincludes ${element})
		foreach (includepath ${allincludes})
			completion_path("${includepath}")
		endforeach()
	endforeach()

	# removed all dupplicates entries + sorting for beauty
	list(REMOVE_DUPLICATES __AUTOCOMPLETION_INCLUDE_LIST)
	list(SORT __AUTOCOMPLETION_INCLUDE_LIST)

	set(VIM_YCM "import os\n")
	set(VIM_YCM "${VIM_YCM}import ycm_core\n\n")
	set(VIM_YCM "${VIM_YCM}flags = ['-Wall', '-Wextra', '-W', '-std=c++11', '-x', 'c++', '-I', '.'\n")
	set(VIM_YCM "${VIM_YCM}\t, '-isystem'\n")
	set(VIM_YCM "${VIM_YCM}\t, '/usr/include'\n")
	set(VIM_YCM "${VIM_YCM}\t, '-isystem'\n")
	set(VIM_YCM "${VIM_YCM}\t, '/usr/local/include'\n")
	if (APPLE)
	set(VIM_YCM "${VIM_YCM}\t, '-isystem'\n")
	set(VIM_YCM "${VIM_YCM}\t, '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include'\n")
	set(VIM_YCM "${VIM_YCM}\t, '-isystem'\n")
	set(VIM_YCM "${VIM_YCM}\t, '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1'\n")
	set(VIM_YCM "${VIM_YCM}\t, '-isystem'\n")
	set(VIM_YCM "${VIM_YCM}\t, '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/clang/5.0/include'\n")
	set(VIM_YCM "${VIM_YCM}\t, '-isystem'\n")
	set(VIM_YCM "${VIM_YCM}\t, '/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include'\n")
	set(VIM_YCM "${VIM_YCM}\t, '-isystem'\n")
	set(VIM_YCM "${VIM_YCM}\t, '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/usr/include'\n")
	set(VIM_YCM "${VIM_YCM}\t, '-isystem'\n")
	set(VIM_YCM "${VIM_YCM}\t, '/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/System/Library/Frameworks'\n")
	endif()

	foreach (path ${__AUTOCOMPLETION_INCLUDE_LIST})
		set(VIM_YCM "${VIM_YCM}\t,'-I','${path}'\n")
	endforeach()
	set(VIM_YCM  "${VIM_YCM}\t]\n\n\n")
	set(VIM_YCM  "${VIM_YCM}compilation_database_folder = '${CMAKE_BINARY_DIR}'

if os.path.exists(compilation_database_folder):
  database = ycm_core.CompilationDatabase(compilation_database_folder)
else:
  database = None


SOURCE_EXTENSIONS = ['.cpp', '.cc', '.c', '.m', '.mm']

def DirectoryOfThisScript():
  return os.path.dirname( os.path.abspath( __file__ ) )


def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):
  if not working_directory:
    return list( flags )
  new_flags = []
  make_next_absolute = False
  path_flags = [ '-isystem', '-I', '-iquote', '--sysroot=' ]
  for flag in flags:
    new_flag = flag

    if make_next_absolute:
      make_next_absolute = False
      if not flag.startswith( '/' ):
        new_flag = os.path.join( working_directory, flag )

    for path_flag in path_flags:
      if flag == path_flag:
        make_next_absolute = True
        break

      if flag.startswith( path_flag ):
        path = flag[ len( path_flag ): ]
        new_flag = path_flag + os.path.join( working_directory, path )
        break

    if new_flag:
      new_flags.append( new_flag )
  return new_flags


def IsHeaderFile( filename ):
  extension = os.path.splitext( filename )[ 1 ]
  return extension in [ '.h', '.hxx', '.hpp', '.hh' ]


def GetCompilationInfoForFile( filename ):
  # The compilation_commands.json file generated by CMake does not have entries
  # for header files. So we do our best by asking the db for flags for a
  # corresponding source file, if any. If one exists, the flags for that file
  # should be good enough.
  if IsHeaderFile( filename ):
    basename = os.path.splitext( filename )[ 0 ]
    for extension in SOURCE_EXTENSIONS:
      replacement_file = basename + extension
      if os.path.exists( replacement_file ):
        compilation_info = database.GetCompilationInfoForFile(
          replacement_file )
        if compilation_info.compiler_flags_:
          return compilation_info
    return None
  return database.GetCompilationInfoForFile( filename )


def FlagsForFile( filename, **kwargs ):
  if database:
    # Bear in mind that compilation_info.compiler_flags_ does NOT return a
    # python list, but a "list-like" StringVec object
    compilation_info = GetCompilationInfoForFile( filename )
    if not compilation_info:
      return None

    final_flags = MakeRelativePathsInFlagsAbsolute(
      compilation_info.compiler_flags_,
      compilation_info.compiler_working_dir_ )

  else:
    relative_to = DirectoryOfThisScript()
    final_flags = MakeRelativePathsInFlagsAbsolute( flags, relative_to )

  return {
    'flags': final_flags,
    'do_cache': True
  }
")


	file(WRITE "${CMAKE_CURRENT_SOURCE_DIR}/../../../../.ycm_extra_conf.py" "${VIM_YCM}")

endmacro()
